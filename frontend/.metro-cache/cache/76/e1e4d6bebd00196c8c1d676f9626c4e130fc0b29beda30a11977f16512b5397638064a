{"dependencies":[],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.deepClone = deepClone;\n  exports.isSdpTypeValid = isSdpTypeValid;\n  exports.normalizeConstraints = normalizeConstraints;\n  exports.normalizeOfferOptions = normalizeOfferOptions;\n  exports.uniqueID = uniqueID;\n  const DEFAULT_AUDIO_CONSTRAINTS = {};\n  const DEFAULT_VIDEO_CONSTRAINTS = {\n    facingMode: 'user',\n    frameRate: 30,\n    height: 720,\n    width: 1280\n  };\n  const FACING_MODES = ['user', 'environment'];\n  const ASPECT_RATIO = 16 / 9;\n  const STANDARD_OFFER_OPTIONS = {\n    icerestart: 'IceRestart',\n    offertoreceiveaudio: 'OfferToReceiveAudio',\n    offertoreceivevideo: 'OfferToReceiveVideo',\n    voiceactivitydetection: 'VoiceActivityDetection'\n  };\n  const SDP_TYPES = ['offer', 'pranswer', 'answer', 'rollback'];\n  function getDefaultMediaConstraints(mediaType) {\n    switch (mediaType) {\n      case 'audio':\n        return DEFAULT_AUDIO_CONSTRAINTS;\n      case 'video':\n        return DEFAULT_VIDEO_CONSTRAINTS;\n      default:\n        throw new TypeError(`Invalid media type: ${mediaType}`);\n    }\n  }\n  function extractString(constraints, prop) {\n    const value = constraints[prop];\n    const type = typeof value;\n    if (type === 'object') {\n      for (const v of ['exact', 'ideal']) {\n        if (value[v]) {\n          return value[v];\n        }\n      }\n    } else if (type === 'string') {\n      return value;\n    }\n  }\n  function extractNumber(constraints, prop) {\n    const value = constraints[prop];\n    const type = typeof value;\n    if (type === 'number') {\n      return Number.parseInt(value);\n    } else if (type === 'object') {\n      for (const v of ['exact', 'ideal', 'max', 'min']) {\n        if (value[v]) {\n          return Number.parseInt(value[v]);\n        }\n      }\n    }\n  }\n  function normalizeMediaConstraints(constraints, mediaType) {\n    switch (mediaType) {\n      case 'audio':\n        return constraints;\n      case 'video':\n        {\n          const c = {\n            deviceId: extractString(constraints, 'deviceId'),\n            facingMode: extractString(constraints, 'facingMode'),\n            frameRate: extractNumber(constraints, 'frameRate'),\n            height: extractNumber(constraints, 'height'),\n            width: extractNumber(constraints, 'width')\n          };\n          if (!c.deviceId) {\n            delete c.deviceId;\n          }\n          if (!FACING_MODES.includes(c.facingMode)) {\n            c.facingMode = DEFAULT_VIDEO_CONSTRAINTS.facingMode;\n          }\n          if (!c.frameRate) {\n            c.frameRate = DEFAULT_VIDEO_CONSTRAINTS.frameRate;\n          }\n          if (!c.height && !c.width) {\n            c.height = DEFAULT_VIDEO_CONSTRAINTS.height;\n            c.width = DEFAULT_VIDEO_CONSTRAINTS.width;\n          } else if (!c.height && c.width) {\n            c.height = Math.round(c.width / ASPECT_RATIO);\n          } else if (!c.width && c.height) {\n            c.width = Math.round(c.height * ASPECT_RATIO);\n          }\n          return c;\n        }\n      default:\n        throw new TypeError(`Invalid media type: ${mediaType}`);\n    }\n  }\n\n  /**\n   * Utility for creating short random strings from float point values.\n   * We take 4 characters from the end after converting to a string.\n   * Conversion to string gives us some letters as we don't want just numbers.\n   * Should be suitable to pass for enough randomness.\n   *\n   * @return {String} 4 random characters\n   */\n  function chr4() {\n    return Math.random().toString(16).slice(-4);\n  }\n\n  /**\n   * Put together a random string in UUIDv4 format {xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx}\n   *\n   * @return {String} uuidv4\n   */\n  function uniqueID() {\n    return `${chr4()}${chr4()}-${chr4()}-${chr4()}-${chr4()}-${chr4()}${chr4()}${chr4()}`;\n  }\n\n  /**\n   * Utility for deep cloning an object. Object.assign() only does a shallow copy.\n   *\n   * @param {Object} obj - object to be cloned\n   * @return {Object} cloned obj\n   */\n  function deepClone(obj) {\n    return JSON.parse(JSON.stringify(obj));\n  }\n\n  /**\n   * Checks whether an SDP type is valid or not.\n   *\n   * @param type SDP type to check.\n   * @returns Whether the SDP type is valid or not.\n   */\n  function isSdpTypeValid(type) {\n    return SDP_TYPES.includes(type);\n  }\n\n  /**\n   * Normalize options passed to createOffer().\n   *\n   * @param options - user supplied options\n   * @return Normalized options\n   */\n  function normalizeOfferOptions(options) {\n    const newOptions = {};\n    if (typeof options !== 'object') {\n      return newOptions;\n    }\n\n    // Convert standard options into WebRTC internal constant names.\n    // See: https://github.com/jitsi/webrtc/blob/0cd6ce4de669bed94ba47b88cb71b9be0341bb81/sdk/media_constraints.cc#L113\n    for (const [key, value] of Object.entries(options)) {\n      const newKey = STANDARD_OFFER_OPTIONS[key.toLowerCase()];\n      if (newKey) {\n        newOptions[newKey] = String(Boolean(value));\n      }\n    }\n    return newOptions;\n  }\n\n  /**\n   * Normalize the given constraints in something we can work with.\n   */\n  function normalizeConstraints(constraints) {\n    const c = deepClone(constraints);\n    for (const mediaType of ['audio', 'video']) {\n      const mediaTypeConstraints = c[mediaType];\n      const typeofMediaTypeConstraints = typeof mediaTypeConstraints;\n      if (typeofMediaTypeConstraints !== 'undefined') {\n        if (typeofMediaTypeConstraints === 'boolean') {\n          if (mediaTypeConstraints) {\n            c[mediaType] = getDefaultMediaConstraints(mediaType);\n          }\n        } else if (typeofMediaTypeConstraints === 'object') {\n          c[mediaType] = normalizeMediaConstraints(mediaTypeConstraints, mediaType);\n        } else {\n          throw new TypeError(`constraints.${mediaType} is neither a boolean nor a dictionary`);\n        }\n      }\n    }\n    return c;\n  }\n});","lineCount":185,"map":[[10,2,1,0],[10,8,1,6,"DEFAULT_AUDIO_CONSTRAINTS"],[10,33,1,31],[10,36,1,34],[10,37,1,35],[10,38,1,36],[11,2,2,0],[11,8,2,6,"DEFAULT_VIDEO_CONSTRAINTS"],[11,33,2,31],[11,36,2,34],[12,4,3,2,"facingMode"],[12,14,3,12],[12,16,3,14],[12,22,3,20],[13,4,4,2,"frameRate"],[13,13,4,11],[13,15,4,13],[13,17,4,15],[14,4,5,2,"height"],[14,10,5,8],[14,12,5,10],[14,15,5,13],[15,4,6,2,"width"],[15,9,6,7],[15,11,6,9],[16,2,7,0],[16,3,7,1],[17,2,8,0],[17,8,8,6,"FACING_MODES"],[17,20,8,18],[17,23,8,21],[17,24,8,22],[17,30,8,28],[17,32,8,30],[17,45,8,43],[17,46,8,44],[18,2,9,0],[18,8,9,6,"ASPECT_RATIO"],[18,20,9,18],[18,23,9,21],[18,25,9,23],[18,28,9,26],[18,29,9,27],[19,2,10,0],[19,8,10,6,"STANDARD_OFFER_OPTIONS"],[19,30,10,28],[19,33,10,31],[20,4,11,2,"icerestart"],[20,14,11,12],[20,16,11,14],[20,28,11,26],[21,4,12,2,"offertoreceiveaudio"],[21,23,12,21],[21,25,12,23],[21,46,12,44],[22,4,13,2,"offertoreceivevideo"],[22,23,13,21],[22,25,13,23],[22,46,13,44],[23,4,14,2,"voiceactivitydetection"],[23,26,14,24],[23,28,14,26],[24,2,15,0],[24,3,15,1],[25,2,16,0],[25,8,16,6,"SDP_TYPES"],[25,17,16,15],[25,20,16,18],[25,21,16,19],[25,28,16,26],[25,30,16,28],[25,40,16,38],[25,42,16,40],[25,50,16,48],[25,52,16,50],[25,62,16,60],[25,63,16,61],[26,2,17,0],[26,11,17,9,"getDefaultMediaConstraints"],[26,37,17,35,"getDefaultMediaConstraints"],[26,38,17,36,"mediaType"],[26,47,17,45],[26,49,17,47],[27,4,18,2],[27,12,18,10,"mediaType"],[27,21,18,19],[28,6,19,4],[28,11,19,9],[28,18,19,16],[29,8,20,6],[29,15,20,13,"DEFAULT_AUDIO_CONSTRAINTS"],[29,40,20,38],[30,6,21,4],[30,11,21,9],[30,18,21,16],[31,8,22,6],[31,15,22,13,"DEFAULT_VIDEO_CONSTRAINTS"],[31,40,22,38],[32,6,23,4],[33,8,24,6],[33,14,24,12],[33,18,24,16,"TypeError"],[33,27,24,25],[33,28,24,26],[33,51,24,49,"mediaType"],[33,60,24,58],[33,62,24,60],[33,63,24,61],[34,4,25,2],[35,2,26,0],[36,2,27,0],[36,11,27,9,"extractString"],[36,24,27,22,"extractString"],[36,25,27,23,"constraints"],[36,36,27,34],[36,38,27,36,"prop"],[36,42,27,40],[36,44,27,42],[37,4,28,2],[37,10,28,8,"value"],[37,15,28,13],[37,18,28,16,"constraints"],[37,29,28,27],[37,30,28,28,"prop"],[37,34,28,32],[37,35,28,33],[38,4,29,2],[38,10,29,8,"type"],[38,14,29,12],[38,17,29,15],[38,24,29,22,"value"],[38,29,29,27],[39,4,30,2],[39,8,30,6,"type"],[39,12,30,10],[39,17,30,15],[39,25,30,23],[39,27,30,25],[40,6,31,4],[40,11,31,9],[40,17,31,15,"v"],[40,18,31,16],[40,22,31,20],[40,23,31,21],[40,30,31,28],[40,32,31,30],[40,39,31,37],[40,40,31,38],[40,42,31,40],[41,8,32,6],[41,12,32,10,"value"],[41,17,32,15],[41,18,32,16,"v"],[41,19,32,17],[41,20,32,18],[41,22,32,20],[42,10,33,8],[42,17,33,15,"value"],[42,22,33,20],[42,23,33,21,"v"],[42,24,33,22],[42,25,33,23],[43,8,34,6],[44,6,35,4],[45,4,36,2],[45,5,36,3],[45,11,36,9],[45,15,36,13,"type"],[45,19,36,17],[45,24,36,22],[45,32,36,30],[45,34,36,32],[46,6,37,4],[46,13,37,11,"value"],[46,18,37,16],[47,4,38,2],[48,2,39,0],[49,2,40,0],[49,11,40,9,"extractNumber"],[49,24,40,22,"extractNumber"],[49,25,40,23,"constraints"],[49,36,40,34],[49,38,40,36,"prop"],[49,42,40,40],[49,44,40,42],[50,4,41,2],[50,10,41,8,"value"],[50,15,41,13],[50,18,41,16,"constraints"],[50,29,41,27],[50,30,41,28,"prop"],[50,34,41,32],[50,35,41,33],[51,4,42,2],[51,10,42,8,"type"],[51,14,42,12],[51,17,42,15],[51,24,42,22,"value"],[51,29,42,27],[52,4,43,2],[52,8,43,6,"type"],[52,12,43,10],[52,17,43,15],[52,25,43,23],[52,27,43,25],[53,6,44,4],[53,13,44,11,"Number"],[53,19,44,17],[53,20,44,18,"parseInt"],[53,28,44,26],[53,29,44,27,"value"],[53,34,44,32],[53,35,44,33],[54,4,45,2],[54,5,45,3],[54,11,45,9],[54,15,45,13,"type"],[54,19,45,17],[54,24,45,22],[54,32,45,30],[54,34,45,32],[55,6,46,4],[55,11,46,9],[55,17,46,15,"v"],[55,18,46,16],[55,22,46,20],[55,23,46,21],[55,30,46,28],[55,32,46,30],[55,39,46,37],[55,41,46,39],[55,46,46,44],[55,48,46,46],[55,53,46,51],[55,54,46,52],[55,56,46,54],[56,8,47,6],[56,12,47,10,"value"],[56,17,47,15],[56,18,47,16,"v"],[56,19,47,17],[56,20,47,18],[56,22,47,20],[57,10,48,8],[57,17,48,15,"Number"],[57,23,48,21],[57,24,48,22,"parseInt"],[57,32,48,30],[57,33,48,31,"value"],[57,38,48,36],[57,39,48,37,"v"],[57,40,48,38],[57,41,48,39],[57,42,48,40],[58,8,49,6],[59,6,50,4],[60,4,51,2],[61,2,52,0],[62,2,53,0],[62,11,53,9,"normalizeMediaConstraints"],[62,36,53,34,"normalizeMediaConstraints"],[62,37,53,35,"constraints"],[62,48,53,46],[62,50,53,48,"mediaType"],[62,59,53,57],[62,61,53,59],[63,4,54,2],[63,12,54,10,"mediaType"],[63,21,54,19],[64,6,55,4],[64,11,55,9],[64,18,55,16],[65,8,56,6],[65,15,56,13,"constraints"],[65,26,56,24],[66,6,57,4],[66,11,57,9],[66,18,57,16],[67,8,58,6],[68,10,59,8],[68,16,59,14,"c"],[68,17,59,15],[68,20,59,18],[69,12,60,10,"deviceId"],[69,20,60,18],[69,22,60,20,"extractString"],[69,35,60,33],[69,36,60,34,"constraints"],[69,47,60,45],[69,49,60,47],[69,59,60,57],[69,60,60,58],[70,12,61,10,"facingMode"],[70,22,61,20],[70,24,61,22,"extractString"],[70,37,61,35],[70,38,61,36,"constraints"],[70,49,61,47],[70,51,61,49],[70,63,61,61],[70,64,61,62],[71,12,62,10,"frameRate"],[71,21,62,19],[71,23,62,21,"extractNumber"],[71,36,62,34],[71,37,62,35,"constraints"],[71,48,62,46],[71,50,62,48],[71,61,62,59],[71,62,62,60],[72,12,63,10,"height"],[72,18,63,16],[72,20,63,18,"extractNumber"],[72,33,63,31],[72,34,63,32,"constraints"],[72,45,63,43],[72,47,63,45],[72,55,63,53],[72,56,63,54],[73,12,64,10,"width"],[73,17,64,15],[73,19,64,17,"extractNumber"],[73,32,64,30],[73,33,64,31,"constraints"],[73,44,64,42],[73,46,64,44],[73,53,64,51],[74,10,65,8],[74,11,65,9],[75,10,66,8],[75,14,66,12],[75,15,66,13,"c"],[75,16,66,14],[75,17,66,15,"deviceId"],[75,25,66,23],[75,27,66,25],[76,12,67,10],[76,19,67,17,"c"],[76,20,67,18],[76,21,67,19,"deviceId"],[76,29,67,27],[77,10,68,8],[78,10,69,8],[78,14,69,12],[78,15,69,13,"FACING_MODES"],[78,27,69,25],[78,28,69,26,"includes"],[78,36,69,34],[78,37,69,35,"c"],[78,38,69,36],[78,39,69,37,"facingMode"],[78,49,69,47],[78,50,69,48],[78,52,69,50],[79,12,70,10,"c"],[79,13,70,11],[79,14,70,12,"facingMode"],[79,24,70,22],[79,27,70,25,"DEFAULT_VIDEO_CONSTRAINTS"],[79,52,70,50],[79,53,70,51,"facingMode"],[79,63,70,61],[80,10,71,8],[81,10,72,8],[81,14,72,12],[81,15,72,13,"c"],[81,16,72,14],[81,17,72,15,"frameRate"],[81,26,72,24],[81,28,72,26],[82,12,73,10,"c"],[82,13,73,11],[82,14,73,12,"frameRate"],[82,23,73,21],[82,26,73,24,"DEFAULT_VIDEO_CONSTRAINTS"],[82,51,73,49],[82,52,73,50,"frameRate"],[82,61,73,59],[83,10,74,8],[84,10,75,8],[84,14,75,12],[84,15,75,13,"c"],[84,16,75,14],[84,17,75,15,"height"],[84,23,75,21],[84,27,75,25],[84,28,75,26,"c"],[84,29,75,27],[84,30,75,28,"width"],[84,35,75,33],[84,37,75,35],[85,12,76,10,"c"],[85,13,76,11],[85,14,76,12,"height"],[85,20,76,18],[85,23,76,21,"DEFAULT_VIDEO_CONSTRAINTS"],[85,48,76,46],[85,49,76,47,"height"],[85,55,76,53],[86,12,77,10,"c"],[86,13,77,11],[86,14,77,12,"width"],[86,19,77,17],[86,22,77,20,"DEFAULT_VIDEO_CONSTRAINTS"],[86,47,77,45],[86,48,77,46,"width"],[86,53,77,51],[87,10,78,8],[87,11,78,9],[87,17,78,15],[87,21,78,19],[87,22,78,20,"c"],[87,23,78,21],[87,24,78,22,"height"],[87,30,78,28],[87,34,78,32,"c"],[87,35,78,33],[87,36,78,34,"width"],[87,41,78,39],[87,43,78,41],[88,12,79,10,"c"],[88,13,79,11],[88,14,79,12,"height"],[88,20,79,18],[88,23,79,21,"Math"],[88,27,79,25],[88,28,79,26,"round"],[88,33,79,31],[88,34,79,32,"c"],[88,35,79,33],[88,36,79,34,"width"],[88,41,79,39],[88,44,79,42,"ASPECT_RATIO"],[88,56,79,54],[88,57,79,55],[89,10,80,8],[89,11,80,9],[89,17,80,15],[89,21,80,19],[89,22,80,20,"c"],[89,23,80,21],[89,24,80,22,"width"],[89,29,80,27],[89,33,80,31,"c"],[89,34,80,32],[89,35,80,33,"height"],[89,41,80,39],[89,43,80,41],[90,12,81,10,"c"],[90,13,81,11],[90,14,81,12,"width"],[90,19,81,17],[90,22,81,20,"Math"],[90,26,81,24],[90,27,81,25,"round"],[90,32,81,30],[90,33,81,31,"c"],[90,34,81,32],[90,35,81,33,"height"],[90,41,81,39],[90,44,81,42,"ASPECT_RATIO"],[90,56,81,54],[90,57,81,55],[91,10,82,8],[92,10,83,8],[92,17,83,15,"c"],[92,18,83,16],[93,8,84,6],[94,6,85,4],[95,8,86,6],[95,14,86,12],[95,18,86,16,"TypeError"],[95,27,86,25],[95,28,86,26],[95,51,86,49,"mediaType"],[95,60,86,58],[95,62,86,60],[95,63,86,61],[96,4,87,2],[97,2,88,0],[99,2,90,0],[100,0,91,0],[101,0,92,0],[102,0,93,0],[103,0,94,0],[104,0,95,0],[105,0,96,0],[106,0,97,0],[107,2,98,0],[107,11,98,9,"chr4"],[107,15,98,13,"chr4"],[107,16,98,13],[107,18,98,16],[108,4,99,2],[108,11,99,9,"Math"],[108,15,99,13],[108,16,99,14,"random"],[108,22,99,20],[108,23,99,21],[108,24,99,22],[108,25,99,23,"toString"],[108,33,99,31],[108,34,99,32],[108,36,99,34],[108,37,99,35],[108,38,99,36,"slice"],[108,43,99,41],[108,44,99,42],[108,45,99,43],[108,46,99,44],[108,47,99,45],[109,2,100,0],[111,2,102,0],[112,0,103,0],[113,0,104,0],[114,0,105,0],[115,0,106,0],[116,2,107,7],[116,11,107,16,"uniqueID"],[116,19,107,24,"uniqueID"],[116,20,107,24],[116,22,107,27],[117,4,108,2],[117,11,108,9],[117,14,108,12,"chr4"],[117,18,108,16],[117,19,108,17],[117,20,108,18],[117,23,108,21,"chr4"],[117,27,108,25],[117,28,108,26],[117,29,108,27],[117,33,108,31,"chr4"],[117,37,108,35],[117,38,108,36],[117,39,108,37],[117,43,108,41,"chr4"],[117,47,108,45],[117,48,108,46],[117,49,108,47],[117,53,108,51,"chr4"],[117,57,108,55],[117,58,108,56],[117,59,108,57],[117,63,108,61,"chr4"],[117,67,108,65],[117,68,108,66],[117,69,108,67],[117,72,108,70,"chr4"],[117,76,108,74],[117,77,108,75],[117,78,108,76],[117,81,108,79,"chr4"],[117,85,108,83],[117,86,108,84],[117,87,108,85],[117,89,108,87],[118,2,109,0],[120,2,111,0],[121,0,112,0],[122,0,113,0],[123,0,114,0],[124,0,115,0],[125,0,116,0],[126,2,117,7],[126,11,117,16,"deepClone"],[126,20,117,25,"deepClone"],[126,21,117,26,"obj"],[126,24,117,29],[126,26,117,31],[127,4,118,2],[127,11,118,9,"JSON"],[127,15,118,13],[127,16,118,14,"parse"],[127,21,118,19],[127,22,118,20,"JSON"],[127,26,118,24],[127,27,118,25,"stringify"],[127,36,118,34],[127,37,118,35,"obj"],[127,40,118,38],[127,41,118,39],[127,42,118,40],[128,2,119,0],[130,2,121,0],[131,0,122,0],[132,0,123,0],[133,0,124,0],[134,0,125,0],[135,0,126,0],[136,2,127,7],[136,11,127,16,"isSdpTypeValid"],[136,25,127,30,"isSdpTypeValid"],[136,26,127,31,"type"],[136,30,127,35],[136,32,127,37],[137,4,128,2],[137,11,128,9,"SDP_TYPES"],[137,20,128,18],[137,21,128,19,"includes"],[137,29,128,27],[137,30,128,28,"type"],[137,34,128,32],[137,35,128,33],[138,2,129,0],[140,2,131,0],[141,0,132,0],[142,0,133,0],[143,0,134,0],[144,0,135,0],[145,0,136,0],[146,2,137,7],[146,11,137,16,"normalizeOfferOptions"],[146,32,137,37,"normalizeOfferOptions"],[146,33,137,38,"options"],[146,40,137,45],[146,42,137,47],[147,4,138,2],[147,10,138,8,"newOptions"],[147,20,138,18],[147,23,138,21],[147,24,138,22],[147,25,138,23],[148,4,139,2],[148,8,139,6],[148,15,139,13,"options"],[148,22,139,20],[148,27,139,25],[148,35,139,33],[148,37,139,35],[149,6,140,4],[149,13,140,11,"newOptions"],[149,23,140,21],[150,4,141,2],[152,4,143,2],[153,4,144,2],[154,4,145,2],[154,9,145,7],[154,15,145,13],[154,16,145,14,"key"],[154,19,145,17],[154,21,145,19,"value"],[154,26,145,24],[154,27,145,25],[154,31,145,29,"Object"],[154,37,145,35],[154,38,145,36,"entries"],[154,45,145,43],[154,46,145,44,"options"],[154,53,145,51],[154,54,145,52],[154,56,145,54],[155,6,146,4],[155,12,146,10,"newKey"],[155,18,146,16],[155,21,146,19,"STANDARD_OFFER_OPTIONS"],[155,43,146,41],[155,44,146,42,"key"],[155,47,146,45],[155,48,146,46,"toLowerCase"],[155,59,146,57],[155,60,146,58],[155,61,146,59],[155,62,146,60],[156,6,147,4],[156,10,147,8,"newKey"],[156,16,147,14],[156,18,147,16],[157,8,148,6,"newOptions"],[157,18,148,16],[157,19,148,17,"newKey"],[157,25,148,23],[157,26,148,24],[157,29,148,27,"String"],[157,35,148,33],[157,36,148,34,"Boolean"],[157,43,148,41],[157,44,148,42,"value"],[157,49,148,47],[157,50,148,48],[157,51,148,49],[158,6,149,4],[159,4,150,2],[160,4,151,2],[160,11,151,9,"newOptions"],[160,21,151,19],[161,2,152,0],[163,2,154,0],[164,0,155,0],[165,0,156,0],[166,2,157,7],[166,11,157,16,"normalizeConstraints"],[166,31,157,36,"normalizeConstraints"],[166,32,157,37,"constraints"],[166,43,157,48],[166,45,157,50],[167,4,158,2],[167,10,158,8,"c"],[167,11,158,9],[167,14,158,12,"deepClone"],[167,23,158,21],[167,24,158,22,"constraints"],[167,35,158,33],[167,36,158,34],[168,4,159,2],[168,9,159,7],[168,15,159,13,"mediaType"],[168,24,159,22],[168,28,159,26],[168,29,159,27],[168,36,159,34],[168,38,159,36],[168,45,159,43],[168,46,159,44],[168,48,159,46],[169,6,160,4],[169,12,160,10,"mediaTypeConstraints"],[169,32,160,30],[169,35,160,33,"c"],[169,36,160,34],[169,37,160,35,"mediaType"],[169,46,160,44],[169,47,160,45],[170,6,161,4],[170,12,161,10,"typeofMediaTypeConstraints"],[170,38,161,36],[170,41,161,39],[170,48,161,46,"mediaTypeConstraints"],[170,68,161,66],[171,6,162,4],[171,10,162,8,"typeofMediaTypeConstraints"],[171,36,162,34],[171,41,162,39],[171,52,162,50],[171,54,162,52],[172,8,163,6],[172,12,163,10,"typeofMediaTypeConstraints"],[172,38,163,36],[172,43,163,41],[172,52,163,50],[172,54,163,52],[173,10,164,8],[173,14,164,12,"mediaTypeConstraints"],[173,34,164,32],[173,36,164,34],[174,12,165,10,"c"],[174,13,165,11],[174,14,165,12,"mediaType"],[174,23,165,21],[174,24,165,22],[174,27,165,25,"getDefaultMediaConstraints"],[174,53,165,51],[174,54,165,52,"mediaType"],[174,63,165,61],[174,64,165,62],[175,10,166,8],[176,8,167,6],[176,9,167,7],[176,15,167,13],[176,19,167,17,"typeofMediaTypeConstraints"],[176,45,167,43],[176,50,167,48],[176,58,167,56],[176,60,167,58],[177,10,168,8,"c"],[177,11,168,9],[177,12,168,10,"mediaType"],[177,21,168,19],[177,22,168,20],[177,25,168,23,"normalizeMediaConstraints"],[177,50,168,48],[177,51,168,49,"mediaTypeConstraints"],[177,71,168,69],[177,73,168,71,"mediaType"],[177,82,168,80],[177,83,168,81],[178,8,169,6],[178,9,169,7],[178,15,169,13],[179,10,170,8],[179,16,170,14],[179,20,170,18,"TypeError"],[179,29,170,27],[179,30,170,28],[179,45,170,43,"mediaType"],[179,54,170,52],[179,94,170,92],[179,95,170,93],[180,8,171,6],[181,6,172,4],[182,4,173,2],[183,4,174,2],[183,11,174,9,"c"],[183,12,174,10],[184,2,175,0],[185,0,175,1],[185,3]],"functionMap":{"names":["<global>","getDefaultMediaConstraints","extractString","extractNumber","normalizeMediaConstraints","chr4","uniqueID","deepClone","isSdpTypeValid","normalizeOfferOptions","normalizeConstraints"],"mappings":"AAA;ACgB;CDS;AEC;CFY;AGC;CHY;AIC;CJmC;AKU;CLE;OMO;CNE;OOQ;CPE;OQQ;CRE;OSQ;CTe;OUK;CVkB"}},"type":"js/module"}]}
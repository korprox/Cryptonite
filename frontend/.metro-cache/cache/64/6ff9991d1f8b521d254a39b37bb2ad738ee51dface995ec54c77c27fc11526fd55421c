{"dependencies":[],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n  class EventEmitter {\n    #registry = {};\n    addListener(eventType, listener, context) {\n      if (typeof listener !== 'function') {\n        throw new TypeError('EventEmitter.addListener(...): 2nd argument must be a function.');\n      }\n      const registrations = allocate(this.#registry, eventType);\n      const registration = {\n        context,\n        listener,\n        remove() {\n          registrations.delete(registration);\n        }\n      };\n      registrations.add(registration);\n      return registration;\n    }\n    emit(eventType, ...args) {\n      const registrations = this.#registry[eventType];\n      if (registrations != null) {\n        for (const registration of Array.from(registrations)) {\n          registration.listener.apply(registration.context, args);\n        }\n      }\n    }\n    removeAllListeners(eventType) {\n      if (eventType == null) {\n        this.#registry = {};\n      } else {\n        delete this.#registry[eventType];\n      }\n    }\n    listenerCount(eventType) {\n      const registrations = this.#registry[eventType];\n      return registrations == null ? 0 : registrations.size;\n    }\n  }\n  exports.default = EventEmitter;\n  function allocate(registry, eventType) {\n    let registrations = registry[eventType];\n    if (registrations == null) {\n      registrations = new Set();\n      registry[eventType] = registrations;\n    }\n    return registrations;\n  }\n});","lineCount":52,"map":[[6,2,69,15],[6,8,69,21,"EventEmitter"],[6,20,69,33],[6,21,74,0],[7,4,76,2],[7,5,76,3,"registry"],[7,13,76,11],[7,16,76,41],[7,17,76,42],[7,18,76,43],[8,4,82,2,"addListener"],[8,15,82,13,"addListener"],[8,16,83,4,"eventType"],[8,25,83,21],[8,27,84,4,"listener"],[8,35,84,57],[8,37,85,4,"context"],[8,44,85,18],[8,46,86,23],[9,6,87,4],[9,10,87,8],[9,17,87,15,"listener"],[9,25,87,23],[9,30,87,28],[9,40,87,38],[9,42,87,40],[10,8,88,6],[10,14,88,12],[10,18,88,16,"TypeError"],[10,27,88,25],[10,28,89,8],[10,93,90,6],[10,94,90,7],[11,6,91,4],[12,6,92,4],[12,12,92,10,"registrations"],[12,25,92,23],[12,28,92,26,"allocate"],[12,36,92,34],[12,37,96,6],[12,41,96,10],[12,42,96,11],[12,43,96,12,"registry"],[12,51,96,20],[12,53,96,22,"eventType"],[12,62,96,31],[12,63,96,32],[13,6,97,4],[13,12,97,10,"registration"],[13,24,97,61],[13,27,97,64],[14,8,98,6,"context"],[14,15,98,13],[15,8,99,6,"listener"],[15,16,99,14],[16,8,100,6,"remove"],[16,14,100,12,"remove"],[16,15,100,12],[16,17,100,21],[17,10,101,8,"registrations"],[17,23,101,21],[17,24,101,22,"delete"],[17,30,101,28],[17,31,101,29,"registration"],[17,43,101,41],[17,44,101,42],[18,8,102,6],[19,6,103,4],[19,7,103,5],[20,6,104,4,"registrations"],[20,19,104,17],[20,20,104,18,"add"],[20,23,104,21],[20,24,104,22,"registration"],[20,36,104,34],[20,37,104,35],[21,6,105,4],[21,13,105,11,"registration"],[21,25,105,23],[22,4,106,2],[23,4,115,2,"emit"],[23,8,115,6,"emit"],[23,9,116,4,"eventType"],[23,18,116,21],[23,20,117,4],[23,23,117,7,"args"],[23,27,117,36],[23,29,118,10],[24,6,119,4],[24,12,119,10,"registrations"],[24,25,119,68],[24,28,120,6],[24,32,120,10],[24,33,120,11],[24,34,120,12,"registry"],[24,42,120,20],[24,43,120,21,"eventType"],[24,52,120,30],[24,53,120,31],[25,6,121,4],[25,10,121,8,"registrations"],[25,23,121,21],[25,27,121,25],[25,31,121,29],[25,33,121,31],[26,8,124,6],[26,13,124,11],[26,19,124,17,"registration"],[26,31,124,29],[26,35,124,33,"Array"],[26,40,124,38],[26,41,124,39,"from"],[26,45,124,43],[26,46,124,44,"registrations"],[26,59,124,57],[26,60,124,58],[26,62,124,60],[27,10,126,8,"registration"],[27,22,126,20],[27,23,126,21,"listener"],[27,31,126,29],[27,32,126,30,"apply"],[27,37,126,35],[27,38,126,36,"registration"],[27,50,126,48],[27,51,126,49,"context"],[27,58,126,56],[27,60,126,58,"args"],[27,64,126,62],[27,65,126,63],[28,8,127,6],[29,6,128,4],[30,4,129,2],[31,4,134,2,"removeAllListeners"],[31,22,134,20,"removeAllListeners"],[31,23,135,4,"eventType"],[31,32,135,23],[31,34,136,10],[32,6,137,4],[32,10,137,8,"eventType"],[32,19,137,17],[32,23,137,21],[32,27,137,25],[32,29,137,27],[33,8,139,6],[33,12,139,10],[33,13,139,11],[33,14,139,12,"registry"],[33,22,139,20],[33,25,139,23],[33,26,139,24],[33,27,139,25],[34,6,140,4],[34,7,140,5],[34,13,140,11],[35,8,141,6],[35,15,141,13],[35,19,141,17],[35,20,141,18],[35,21,141,19,"registry"],[35,29,141,27],[35,30,141,28,"eventType"],[35,39,141,37],[35,40,141,38],[36,6,142,4],[37,4,143,2],[38,4,148,2,"listenerCount"],[38,17,148,15,"listenerCount"],[38,18,148,48,"eventType"],[38,27,148,65],[38,29,148,75],[39,6,149,4],[39,12,149,10,"registrations"],[39,25,149,68],[39,28,150,6],[39,32,150,10],[39,33,150,11],[39,34,150,12,"registry"],[39,42,150,20],[39,43,150,21,"eventType"],[39,52,150,30],[39,53,150,31],[40,6,151,4],[40,13,151,11,"registrations"],[40,26,151,24],[40,30,151,28],[40,34,151,32],[40,37,151,35],[40,38,151,36],[40,41,151,39,"registrations"],[40,54,151,52],[40,55,151,53,"size"],[40,59,151,57],[41,4,152,2],[42,2,153,0],[43,2,153,1,"exports"],[43,9,153,1],[43,10,153,1,"default"],[43,17,153,1],[43,20,153,1,"EventEmitter"],[43,32,153,1],[44,2,155,0],[44,11,155,9,"allocate"],[44,19,155,17,"allocate"],[44,20,160,2,"registry"],[44,28,160,37],[44,30,161,2,"eventType"],[44,39,161,19],[44,41,162,46],[45,4,163,2],[45,8,163,6,"registrations"],[45,21,163,64],[45,24,164,4,"registry"],[45,32,164,12],[45,33,164,13,"eventType"],[45,42,164,22],[45,43,164,23],[46,4,165,2],[46,8,165,6,"registrations"],[46,21,165,19],[46,25,165,23],[46,29,165,27],[46,31,165,29],[47,6,166,4,"registrations"],[47,19,166,17],[47,22,166,20],[47,26,166,24,"Set"],[47,29,166,27],[47,30,166,28],[47,31,166,29],[48,6,167,4,"registry"],[48,14,167,12],[48,15,167,13,"eventType"],[48,24,167,22],[48,25,167,23],[48,28,167,26,"registrations"],[48,41,167,39],[49,4,168,2],[50,4,169,2],[50,11,169,9,"registrations"],[50,24,169,22],[51,2,170,0],[52,0,170,1],[52,3]],"functionMap":{"names":["<global>","EventEmitter","addListener","registration.remove","emit","removeAllListeners","listenerCount","allocate"],"mappings":"AAA;eCoE;ECa;MCkB;ODE;GDI;EGS;GHc;EIK;GJS;EKK;GLI;CDC;AOE"}},"type":"js/module"}]}
{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"kslwqCIsh6ew+I1KeA1rlVRjsAk=","exportNames":["*"]}},{"name":"@babel/runtime/helpers/slicedToArray","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"5y7e5+zC7teYEEC6niD9f5zII1M=","exportNames":["*"]}},{"name":"@babel/runtime/helpers/asyncToGenerator","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"YisBBiy2Xm9DEVdFebZ2nbgAHBo=","exportNames":["*"]}},{"name":"@babel/runtime/helpers/classCallCheck","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"yg7e6laZwmpbIvId5jovq9ugXp8=","exportNames":["*"]}},{"name":"@babel/runtime/helpers/createClass","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"Z6pzkVZ2fvxBLkFTgVVOy4UDj30=","exportNames":["*"]}},{"name":"@babel/runtime/helpers/possibleConstructorReturn","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"aU3Lrys8xTVpYSDJal2nhppojC8=","exportNames":["*"]}},{"name":"@babel/runtime/helpers/getPrototypeOf","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"4DwyfFXBA53CJWVTVj5w3kH1PUg=","exportNames":["*"]}},{"name":"@babel/runtime/helpers/inherits","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"y0uNg4LxF1CLscQChxzgo5dfjvA=","exportNames":["*"]}},{"name":"event-target-shim/index","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":83,"index":83}}],"key":"d2LuLwwFo1OVAiPiAfStHVEPB04=","exportNames":["*"]}},{"name":"react-native","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":84},"end":{"line":2,"column":45,"index":129}}],"key":"KyzuX10g6ixS9UfynhmjlvCIG3g=","exportNames":["*"]}},{"name":"./EventEmitter","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":131},"end":{"line":4,"column":61,"index":192}}],"key":"c7y51sdeNB+ZIpPSVQeGauhYgLk=","exportNames":["*"]}},{"name":"./Logger","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":5,"column":0,"index":193},"end":{"line":5,"column":30,"index":223}}],"key":"5Ly9HLoc+1926tsk0VOIulpST/Y=","exportNames":["*"]}},{"name":"./MediaStream","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":6,"column":0,"index":224},"end":{"line":6,"column":40,"index":264}}],"key":"3Kf/979wvknqzqe4InQeiqZ8m2s=","exportNames":["*"]}},{"name":"./MediaStreamTrack","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":7,"column":0,"index":265},"end":{"line":7,"column":50,"index":315}}],"key":"p8DgKb9dKwcdlolbSXUFkI2QMkE=","exportNames":["*"]}},{"name":"./MediaStreamTrackEvent","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":8,"column":0,"index":316},"end":{"line":8,"column":60,"index":376}}],"key":"8zkeAlwcpkB5cUufkBbi0aJcT+M=","exportNames":["*"]}},{"name":"./RTCDataChannel","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":9,"column":0,"index":377},"end":{"line":9,"column":46,"index":423}}],"key":"o7tcCGp5cjMMMzKlLuQrbWxUzUk=","exportNames":["*"]}},{"name":"./RTCDataChannelEvent","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":10,"column":0,"index":424},"end":{"line":10,"column":56,"index":480}}],"key":"GQb1riZFVHc0m8fLvpJn3PaOGEc=","exportNames":["*"]}},{"name":"./RTCIceCandidate","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":11,"column":0,"index":481},"end":{"line":11,"column":48,"index":529}}],"key":"8piR4KGifuePn/S5VvVVtLLhp5w=","exportNames":["*"]}},{"name":"./RTCIceCandidateEvent","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":12,"column":0,"index":530},"end":{"line":12,"column":58,"index":588}}],"key":"D3ddbYoeuGAqRmRgYF5M1gsk0CY=","exportNames":["*"]}},{"name":"./RTCRtpReceiveParameters","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":13,"column":0,"index":589},"end":{"line":13,"column":64,"index":653}}],"key":"0Kb8VdEI2CktRN/tLwnT1fbLoaw=","exportNames":["*"]}},{"name":"./RTCRtpReceiver","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":14,"column":0,"index":654},"end":{"line":14,"column":46,"index":700}}],"key":"yZAfthAEKMSwBwQXwoNpbYicKto=","exportNames":["*"]}},{"name":"./RTCRtpSendParameters","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":15,"column":0,"index":701},"end":{"line":15,"column":58,"index":759}}],"key":"/yZT0e+J5xh/yWE3KkbMJT/kJcA=","exportNames":["*"]}},{"name":"./RTCRtpSender","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":16,"column":0,"index":760},"end":{"line":16,"column":42,"index":802}}],"key":"AcoppcC/iSelK3gWvtfO7colNTY=","exportNames":["*"]}},{"name":"./RTCRtpTransceiver","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":17,"column":0,"index":803},"end":{"line":17,"column":52,"index":855}}],"key":"jDsWKFFlCMRI2jYK6Qh+njDBfAg=","exportNames":["*"]}},{"name":"./RTCSessionDescription","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":18,"column":0,"index":856},"end":{"line":18,"column":91,"index":947}}],"key":"TodN18NV/TPfeUao5B554ZRQpuo=","exportNames":["*"]}},{"name":"./RTCTrackEvent","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":19,"column":0,"index":948},"end":{"line":19,"column":44,"index":992}}],"key":"ZkXxf1qg4GqwuN0lKoMb4x5Jk+c=","exportNames":["*"]}},{"name":"./RTCUtil","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":20,"column":0,"index":993},"end":{"line":20,"column":37,"index":1030}}],"key":"CN8UyESr1mxcK8UZcasAG4s3jsI=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = require(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n  var _slicedToArray2 = _interopRequireDefault(require(_dependencyMap[1], \"@babel/runtime/helpers/slicedToArray\"));\n  var _asyncToGenerator2 = _interopRequireDefault(require(_dependencyMap[2], \"@babel/runtime/helpers/asyncToGenerator\"));\n  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[3], \"@babel/runtime/helpers/classCallCheck\"));\n  var _createClass2 = _interopRequireDefault(require(_dependencyMap[4], \"@babel/runtime/helpers/createClass\"));\n  var _possibleConstructorReturn2 = _interopRequireDefault(require(_dependencyMap[5], \"@babel/runtime/helpers/possibleConstructorReturn\"));\n  var _getPrototypeOf2 = _interopRequireDefault(require(_dependencyMap[6], \"@babel/runtime/helpers/getPrototypeOf\"));\n  var _inherits2 = _interopRequireDefault(require(_dependencyMap[7], \"@babel/runtime/helpers/inherits\"));\n  var _index = require(_dependencyMap[8], \"event-target-shim/index\");\n  var _reactNative = require(_dependencyMap[9], \"react-native\");\n  var _EventEmitter = require(_dependencyMap[10], \"./EventEmitter\");\n  var _Logger = _interopRequireDefault(require(_dependencyMap[11], \"./Logger\"));\n  var _MediaStream = _interopRequireDefault(require(_dependencyMap[12], \"./MediaStream\"));\n  var _MediaStreamTrack = _interopRequireDefault(require(_dependencyMap[13], \"./MediaStreamTrack\"));\n  var _MediaStreamTrackEvent = _interopRequireDefault(require(_dependencyMap[14], \"./MediaStreamTrackEvent\"));\n  var _RTCDataChannel = _interopRequireDefault(require(_dependencyMap[15], \"./RTCDataChannel\"));\n  var _RTCDataChannelEvent = _interopRequireDefault(require(_dependencyMap[16], \"./RTCDataChannelEvent\"));\n  var _RTCIceCandidate = _interopRequireDefault(require(_dependencyMap[17], \"./RTCIceCandidate\"));\n  var _RTCIceCandidateEvent = _interopRequireDefault(require(_dependencyMap[18], \"./RTCIceCandidateEvent\"));\n  var _RTCRtpReceiveParameters = _interopRequireDefault(require(_dependencyMap[19], \"./RTCRtpReceiveParameters\"));\n  var _RTCRtpReceiver = _interopRequireDefault(require(_dependencyMap[20], \"./RTCRtpReceiver\"));\n  var _RTCRtpSendParameters = _interopRequireDefault(require(_dependencyMap[21], \"./RTCRtpSendParameters\"));\n  var _RTCRtpSender = _interopRequireDefault(require(_dependencyMap[22], \"./RTCRtpSender\"));\n  var _RTCRtpTransceiver = _interopRequireDefault(require(_dependencyMap[23], \"./RTCRtpTransceiver\"));\n  var _RTCSessionDescription = _interopRequireDefault(require(_dependencyMap[24], \"./RTCSessionDescription\"));\n  var _RTCTrackEvent = _interopRequireDefault(require(_dependencyMap[25], \"./RTCTrackEvent\"));\n  var RTCUtil = _interopRequireWildcard(require(_dependencyMap[26], \"./RTCUtil\"));\n  function _interopRequireWildcard(e, t) { if (\"function\" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || \"object\" != typeof e && \"function\" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) \"default\" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }\n  function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }\n  function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function () { return !!t; })(); }\n  var log = new _Logger.default('pc');\n  var WebRTCModule = _reactNative.NativeModules.WebRTCModule;\n  var nextPeerConnectionId = 0;\n  var RTCPeerConnection = exports.default = /*#__PURE__*/function (_EventTarget) {\n    function RTCPeerConnection(configuration) {\n      var _this;\n      (0, _classCallCheck2.default)(this, RTCPeerConnection);\n      _this = _callSuper(this, RTCPeerConnection);\n      _this.localDescription = null;\n      _this.remoteDescription = null;\n      _this.signalingState = 'stable';\n      _this.iceGatheringState = 'new';\n      _this.connectionState = 'new';\n      _this.iceConnectionState = 'new';\n      _this._pcId = nextPeerConnectionId++;\n\n      // Sanitize ICE servers.\n      if (configuration) {\n        var servers = configuration?.iceServers ?? [];\n        for (var server of servers) {\n          var urls = server.url || server.urls;\n          delete server.url;\n          delete server.urls;\n          if (!urls) {\n            continue;\n          }\n          if (!Array.isArray(urls)) {\n            urls = [urls];\n          }\n\n          // Native WebRTC does case sensitive parsing.\n          server.urls = urls.map(url => url.toLowerCase());\n        }\n\n        // Filter out bogus servers.\n        configuration.iceServers = servers.filter(s => s.urls);\n      }\n      if (!WebRTCModule.peerConnectionInit(configuration, _this._pcId)) {\n        throw new Error('Failed to initialize PeerConnection, check the native logs!');\n      }\n      _this._transceivers = [];\n      _this._remoteStreams = new Map();\n      _this._pendingTrackEvents = [];\n      _this._registerEvents();\n      log.debug(`${_this._pcId} ctor`);\n      return _this;\n    }\n    (0, _inherits2.default)(RTCPeerConnection, _EventTarget);\n    return (0, _createClass2.default)(RTCPeerConnection, [{\n      key: \"createOffer\",\n      value: function () {\n        var _createOffer = (0, _asyncToGenerator2.default)(function* (options) {\n          log.debug(`${this._pcId} createOffer`);\n          var _yield$WebRTCModule$p = yield WebRTCModule.peerConnectionCreateOffer(this._pcId, RTCUtil.normalizeOfferOptions(options)),\n            sdpInfo = _yield$WebRTCModule$p.sdpInfo,\n            newTransceivers = _yield$WebRTCModule$p.newTransceivers,\n            transceiversInfo = _yield$WebRTCModule$p.transceiversInfo;\n          log.debug(`${this._pcId} createOffer OK`);\n          newTransceivers?.forEach(t => {\n            var transceiverOrder = t.transceiverOrder,\n              transceiver = t.transceiver;\n            var newSender = new _RTCRtpSender.default({\n              ...transceiver.sender,\n              track: null\n            });\n            var remoteTrack = transceiver.receiver.track ? new _MediaStreamTrack.default(transceiver.receiver.track) : null;\n            var newReceiver = new _RTCRtpReceiver.default({\n              ...transceiver.receiver,\n              track: remoteTrack\n            });\n            var newTransceiver = new _RTCRtpTransceiver.default({\n              ...transceiver,\n              sender: newSender,\n              receiver: newReceiver\n            });\n            this._insertTransceiverSorted(transceiverOrder, newTransceiver);\n          });\n          this._updateTransceivers(transceiversInfo);\n          return sdpInfo;\n        });\n        function createOffer(_x) {\n          return _createOffer.apply(this, arguments);\n        }\n        return createOffer;\n      }()\n    }, {\n      key: \"createAnswer\",\n      value: function () {\n        var _createAnswer = (0, _asyncToGenerator2.default)(function* () {\n          log.debug(`${this._pcId} createAnswer`);\n          var _yield$WebRTCModule$p2 = yield WebRTCModule.peerConnectionCreateAnswer(this._pcId, {}),\n            sdpInfo = _yield$WebRTCModule$p2.sdpInfo,\n            transceiversInfo = _yield$WebRTCModule$p2.transceiversInfo;\n          this._updateTransceivers(transceiversInfo);\n          return sdpInfo;\n        });\n        function createAnswer() {\n          return _createAnswer.apply(this, arguments);\n        }\n        return createAnswer;\n      }()\n    }, {\n      key: \"setConfiguration\",\n      value: function setConfiguration(configuration) {\n        WebRTCModule.peerConnectionSetConfiguration(configuration, this._pcId);\n      }\n    }, {\n      key: \"setLocalDescription\",\n      value: function () {\n        var _setLocalDescription = (0, _asyncToGenerator2.default)(function* (sessionDescription) {\n          log.debug(`${this._pcId} setLocalDescription`);\n          var desc;\n          if (sessionDescription) {\n            desc = {\n              type: sessionDescription.type,\n              sdp: sessionDescription.sdp ?? ''\n            };\n            if (!RTCUtil.isSdpTypeValid(desc.type)) {\n              throw new Error(`Invalid session description: invalid type: ${desc.type}`);\n            }\n          } else {\n            desc = null;\n          }\n          var _yield$WebRTCModule$p3 = yield WebRTCModule.peerConnectionSetLocalDescription(this._pcId, desc),\n            sdpInfo = _yield$WebRTCModule$p3.sdpInfo,\n            transceiversInfo = _yield$WebRTCModule$p3.transceiversInfo;\n          if (sdpInfo.type && sdpInfo.sdp) {\n            this.localDescription = new _RTCSessionDescription.default(sdpInfo);\n          } else {\n            this.localDescription = null;\n          }\n          this._updateTransceivers(transceiversInfo, /* removeStopped */desc?.type === 'answer');\n          log.debug(`${this._pcId} setLocalDescription OK`);\n        });\n        function setLocalDescription(_x2) {\n          return _setLocalDescription.apply(this, arguments);\n        }\n        return setLocalDescription;\n      }()\n    }, {\n      key: \"setRemoteDescription\",\n      value: function () {\n        var _setRemoteDescription = (0, _asyncToGenerator2.default)(function* (sessionDescription) {\n          var _this2 = this;\n          log.debug(`${this._pcId} setRemoteDescription`);\n          if (!sessionDescription) {\n            return Promise.reject(new Error('No session description provided'));\n          }\n          var desc = {\n            type: sessionDescription.type,\n            sdp: sessionDescription.sdp ?? ''\n          };\n          if (!RTCUtil.isSdpTypeValid(desc.type ?? '')) {\n            throw new Error(`Invalid session description: invalid type: ${desc.type}`);\n          }\n          var _yield$WebRTCModule$p4 = yield WebRTCModule.peerConnectionSetRemoteDescription(this._pcId, desc),\n            sdpInfo = _yield$WebRTCModule$p4.sdpInfo,\n            newTransceivers = _yield$WebRTCModule$p4.newTransceivers,\n            transceiversInfo = _yield$WebRTCModule$p4.transceiversInfo;\n          if (sdpInfo.type && sdpInfo.sdp) {\n            this.remoteDescription = new _RTCSessionDescription.default(sdpInfo);\n          } else {\n            this.remoteDescription = null;\n          }\n          newTransceivers?.forEach(t => {\n            var transceiverOrder = t.transceiverOrder,\n              transceiver = t.transceiver;\n            var newSender = new _RTCRtpSender.default({\n              ...transceiver.sender,\n              track: null\n            });\n            var remoteTrack = transceiver.receiver.track ? new _MediaStreamTrack.default(transceiver.receiver.track) : null;\n            var newReceiver = new _RTCRtpReceiver.default({\n              ...transceiver.receiver,\n              track: remoteTrack\n            });\n            var newTransceiver = new _RTCRtpTransceiver.default({\n              ...transceiver,\n              sender: newSender,\n              receiver: newReceiver\n            });\n            this._insertTransceiverSorted(transceiverOrder, newTransceiver);\n          });\n          this._updateTransceivers(transceiversInfo, /* removeStopped */desc.type === 'answer');\n\n          // Fire track events. They must fire before sRD resolves.\n          var pendingTrackEvents = this._pendingTrackEvents;\n          this._pendingTrackEvents = [];\n          var _loop = function* (ev) {\n            var _this2$getTransceiver = _this2.getTransceivers().filter(t => t.receiver.id === ev.receiver.id),\n              _this2$getTransceiver2 = (0, _slicedToArray2.default)(_this2$getTransceiver, 1),\n              transceiver = _this2$getTransceiver2[0];\n\n            // We need to fire this event for an existing track sometimes, like\n            // when the transceiver direction (on the sending side) switches from\n            // sendrecv to recvonly and then back.\n\n            // @ts-ignore\n            var track = transceiver.receiver.track;\n            transceiver._mid = ev.transceiver.mid;\n            transceiver._currentDirection = ev.transceiver.currentDirection;\n            transceiver._direction = ev.transceiver.direction;\n\n            // Get the stream object from the event. Create if necessary.\n            var streams = ev.streams.map(streamInfo => {\n              // Here we are making sure that we don't create stream objects that already exist\n              // So that event listeners do get the same object if it has been created before.\n              if (!_this2._remoteStreams.has(streamInfo.streamId)) {\n                var _stream = new _MediaStream.default({\n                  streamId: streamInfo.streamId,\n                  streamReactTag: streamInfo.streamReactTag,\n                  tracks: []\n                });\n                _this2._remoteStreams.set(streamInfo.streamId, _stream);\n              }\n              var stream = _this2._remoteStreams.get(streamInfo.streamId);\n              if (!stream?._tracks.includes(track)) {\n                stream?._tracks.push(track);\n              }\n              return stream;\n            });\n            var eventData = {\n              streams,\n              transceiver,\n              track,\n              receiver: transceiver.receiver\n            };\n            _this2.dispatchEvent(new _RTCTrackEvent.default('track', eventData));\n            streams.forEach(stream => {\n              stream.dispatchEvent(new _MediaStreamTrackEvent.default('addtrack', {\n                track\n              }));\n            });\n\n            // Dispatch an unmute event for the track.\n            track._setMutedInternal(false);\n          };\n          for (var ev of pendingTrackEvents) {\n            yield* _loop(ev);\n          }\n          log.debug(`${this._pcId} setRemoteDescription OK`);\n        });\n        function setRemoteDescription(_x3) {\n          return _setRemoteDescription.apply(this, arguments);\n        }\n        return setRemoteDescription;\n      }()\n    }, {\n      key: \"addIceCandidate\",\n      value: function () {\n        var _addIceCandidate = (0, _asyncToGenerator2.default)(function* (candidate) {\n          log.debug(`${this._pcId} addIceCandidate`);\n          if (!candidate || !candidate.candidate) {\n            // XXX end-of candidates is not implemented: https://bugs.chromium.org/p/webrtc/issues/detail?id=9218\n            return;\n          }\n          if ((candidate.sdpMLineIndex === null || candidate.sdpMLineIndex === undefined) && (candidate.sdpMid === null || candidate.sdpMid === undefined)) {\n            throw new TypeError('`sdpMLineIndex` and `sdpMid` must not be both null or undefined');\n          }\n          var newSdp = yield WebRTCModule.peerConnectionAddICECandidate(this._pcId, RTCUtil.deepClone(candidate));\n          this.remoteDescription = new _RTCSessionDescription.default(newSdp);\n        });\n        function addIceCandidate(_x4) {\n          return _addIceCandidate.apply(this, arguments);\n        }\n        return addIceCandidate;\n      }()\n      /**\n       * @brief Adds a new track to the {@link RTCPeerConnection},\n       * and indicates that it is contained in the specified {@link MediaStream}s.\n       * This method has to be synchronous as the W3C API expects a track to be returned\n       * @param {MediaStreamTrack} track The track to be added\n       * @param {...MediaStream} streams One or more {@link MediaStream}s the track needs to be added to\n       * https://w3c.github.io/webrtc-pc/#dom-rtcpeerconnection-addtrack\n       */\n    }, {\n      key: \"addTrack\",\n      value: function addTrack(track) {\n        log.debug(`${this._pcId} addTrack`);\n        if (this.connectionState === 'closed') {\n          throw new Error('Peer Connection is closed');\n        }\n        if (this._trackExists(track)) {\n          throw new Error('Track already exists in a sender');\n        }\n        for (var _len = arguments.length, streams = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n          streams[_key - 1] = arguments[_key];\n        }\n        var streamIds = streams.map(s => s.id);\n        var result = WebRTCModule.peerConnectionAddTrack(this._pcId, track.id, {\n          streamIds\n        });\n        if (result === null) {\n          throw new Error('Could not add sender');\n        }\n        var transceiverOrder = result.transceiverOrder,\n          transceiver = result.transceiver,\n          sender = result.sender;\n\n        // According to the W3C docs, the sender could have been reused, and\n        // so we check if that is the case, and update accordingly.\n        var _this$getSenders$filt = this.getSenders().filter(s => s.id === sender.id),\n          _this$getSenders$filt2 = (0, _slicedToArray2.default)(_this$getSenders$filt, 1),\n          existingSender = _this$getSenders$filt2[0];\n        if (existingSender) {\n          // Update sender\n          existingSender._track = track;\n\n          // Update the corresponding transceiver as well\n          var _this$getTransceivers = this.getTransceivers().filter(t => t.sender.id === existingSender.id),\n            _this$getTransceivers2 = (0, _slicedToArray2.default)(_this$getTransceivers, 1),\n            existingTransceiver = _this$getTransceivers2[0];\n          existingTransceiver._direction = transceiver.direction;\n          existingTransceiver._currentDirection = transceiver.currentDirection;\n          return existingSender;\n        }\n\n        // This is a new transceiver, should create a transceiver for it and add it\n        var newSender = new _RTCRtpSender.default({\n          ...transceiver.sender,\n          track\n        });\n        var remoteTrack = transceiver.receiver.track ? new _MediaStreamTrack.default(transceiver.receiver.track) : null;\n        var newReceiver = new _RTCRtpReceiver.default({\n          ...transceiver.receiver,\n          track: remoteTrack\n        });\n        var newTransceiver = new _RTCRtpTransceiver.default({\n          ...transceiver,\n          sender: newSender,\n          receiver: newReceiver\n        });\n        this._insertTransceiverSorted(transceiverOrder, newTransceiver);\n        return newSender;\n      }\n    }, {\n      key: \"addTransceiver\",\n      value: function addTransceiver(source, init) {\n        log.debug(`${this._pcId} addTransceiver`);\n        var src = {};\n        if (source === 'audio') {\n          src = {\n            type: 'audio'\n          };\n        } else if (source === 'video') {\n          src = {\n            type: 'video'\n          };\n        } else {\n          src = {\n            trackId: source.id\n          };\n        }\n\n        // Extract the stream ids\n        if (init && init.streams) {\n          init.streamIds = init.streams.map(stream => stream.id);\n        }\n        var result = WebRTCModule.peerConnectionAddTransceiver(this._pcId, {\n          ...src,\n          init: {\n            ...init\n          }\n        });\n        if (result === null) {\n          throw new Error('Transceiver could not be added');\n        }\n        var t = result.transceiver;\n        var track = null;\n        if (typeof source === 'string') {\n          if (t.sender.track) {\n            track = new _MediaStreamTrack.default(t.sender.track);\n          }\n        } else {\n          // 'source' is a MediaStreamTrack\n          track = source;\n        }\n        var sender = new _RTCRtpSender.default({\n          ...t.sender,\n          track\n        });\n        var remoteTrack = t.receiver.track ? new _MediaStreamTrack.default(t.receiver.track) : null;\n        var receiver = new _RTCRtpReceiver.default({\n          ...t.receiver,\n          track: remoteTrack\n        });\n        var transceiver = new _RTCRtpTransceiver.default({\n          ...result.transceiver,\n          sender,\n          receiver\n        });\n        this._insertTransceiverSorted(result.transceiverOrder, transceiver);\n        return transceiver;\n      }\n    }, {\n      key: \"removeTrack\",\n      value: function removeTrack(sender) {\n        log.debug(`${this._pcId} removeTrack`);\n        if (this._pcId !== sender._peerConnectionId) {\n          throw new Error('Sender does not belong to this peer connection');\n        }\n        if (this.connectionState === 'closed') {\n          throw new Error('Peer Connection is closed');\n        }\n        var existingSender = this.getSenders().find(s => s === sender);\n        if (!existingSender) {\n          throw new Error('Sender does not exist');\n        }\n        if (existingSender.track === null) {\n          return;\n        }\n\n        // Blocking!\n        WebRTCModule.peerConnectionRemoveTrack(this._pcId, sender.id);\n        existingSender._track = null;\n        var _this$getTransceivers3 = this.getTransceivers().filter(t => t.sender.id === existingSender.id),\n          _this$getTransceivers4 = (0, _slicedToArray2.default)(_this$getTransceivers3, 1),\n          existingTransceiver = _this$getTransceivers4[0];\n        existingTransceiver._direction = existingTransceiver.direction === 'sendrecv' ? 'recvonly' : 'inactive';\n      }\n    }, {\n      key: \"getStats\",\n      value: function () {\n        var _getStats = (0, _asyncToGenerator2.default)(function* (selector) {\n          log.debug(`${this._pcId} getStats`);\n          if (!selector) {\n            var data = yield WebRTCModule.peerConnectionGetStats(this._pcId);\n\n            /**\n             * On both Android and iOS it is faster to construct a single\n             * JSON string representing the Map of StatsReports and have it\n             * pass through the React Native bridge rather than the Map of\n             * StatsReports. While the implementations do try to be faster in\n             * general, the stress is on being faster to pass through the React\n             * Native bridge which is a bottleneck that tends to be visible in\n             * the UI when there is congestion involving UI-related passing.\n             */\n            return new Map(JSON.parse(data));\n          } else {\n            var senders = this.getSenders().filter(s => s.track === selector);\n            var receivers = this.getReceivers().filter(r => r.track === selector);\n            var matches = senders.length + receivers.length;\n            if (matches === 0) {\n              throw new Error('Invalid selector: could not find matching sender / receiver');\n            } else if (matches > 1) {\n              throw new Error('Invalid selector: multiple matching senders / receivers');\n            } else {\n              var sr = senders[0] || receivers[0];\n              return sr.getStats();\n            }\n          }\n        });\n        function getStats(_x5) {\n          return _getStats.apply(this, arguments);\n        }\n        return getStats;\n      }()\n    }, {\n      key: \"getTransceivers\",\n      value: function getTransceivers() {\n        return this._transceivers.map(e => e.transceiver);\n      }\n    }, {\n      key: \"getSenders\",\n      value: function getSenders() {\n        return this._transceivers.filter(e => !e.transceiver.stopped).map(e => e.transceiver.sender);\n      }\n    }, {\n      key: \"getReceivers\",\n      value: function getReceivers() {\n        return this._transceivers.filter(e => !e.transceiver.stopped).map(e => e.transceiver.receiver);\n      }\n    }, {\n      key: \"close\",\n      value: function close() {\n        log.debug(`${this._pcId} close`);\n        if (this.connectionState === 'closed') {\n          return;\n        }\n        WebRTCModule.peerConnectionClose(this._pcId);\n\n        // Mark transceivers as stopped.\n        this._transceivers.forEach(_ref => {\n          var transceiver = _ref.transceiver;\n          transceiver._setStopped();\n        });\n      }\n    }, {\n      key: \"restartIce\",\n      value: function restartIce() {\n        WebRTCModule.peerConnectionRestartIce(this._pcId);\n      }\n    }, {\n      key: \"_registerEvents\",\n      value: function _registerEvents() {\n        (0, _EventEmitter.addListener)(this, 'peerConnectionOnRenegotiationNeeded', ev => {\n          if (ev.pcId !== this._pcId) {\n            return;\n          }\n          this.dispatchEvent(new _index.Event('negotiationneeded'));\n        });\n        (0, _EventEmitter.addListener)(this, 'peerConnectionIceConnectionChanged', ev => {\n          if (ev.pcId !== this._pcId) {\n            return;\n          }\n          this.iceConnectionState = ev.iceConnectionState;\n          this.dispatchEvent(new _index.Event('iceconnectionstatechange'));\n        });\n        (0, _EventEmitter.addListener)(this, 'peerConnectionStateChanged', ev => {\n          if (ev.pcId !== this._pcId) {\n            return;\n          }\n          this.connectionState = ev.connectionState;\n          this.dispatchEvent(new _index.Event('connectionstatechange'));\n          if (ev.connectionState === 'closed') {\n            // This PeerConnection is done, clean up.\n            (0, _EventEmitter.removeListener)(this);\n            WebRTCModule.peerConnectionDispose(this._pcId);\n          }\n        });\n        (0, _EventEmitter.addListener)(this, 'peerConnectionSignalingStateChanged', ev => {\n          if (ev.pcId !== this._pcId) {\n            return;\n          }\n          this.signalingState = ev.signalingState;\n          this.dispatchEvent(new _index.Event('signalingstatechange'));\n        });\n\n        // Consider moving away from this event: https://github.com/WebKit/WebKit/pull/3953\n        (0, _EventEmitter.addListener)(this, 'peerConnectionOnTrack', ev => {\n          if (ev.pcId !== this._pcId) {\n            return;\n          }\n          log.debug(`${this._pcId} ontrack`);\n\n          // NOTE: We need to make sure the track event fires right before sRD completes,\n          // so we queue them up here and dispatch the events when sRD fires, but before completing it.\n          // In the future we should probably implement out own logic and drop this event altogether.\n          this._pendingTrackEvents.push(ev);\n        });\n        (0, _EventEmitter.addListener)(this, 'peerConnectionOnRemoveTrack', ev => {\n          if (ev.pcId !== this._pcId) {\n            return;\n          }\n          log.debug(`${this._pcId} onremovetrack ${ev.receiverId}`);\n          var receiver = this.getReceivers().find(r => r.id === ev.receiverId);\n          var track = receiver?.track;\n          if (receiver && track) {\n            // As per the spec:\n            // - Remove the track from any media streams that were previously passed to the `track` event.\n            // https://w3c.github.io/webrtc-pc/#dom-rtcpeerconnection-removetrack,\n            // - Mark the track as muted:\n            // https://w3c.github.io/webrtc-pc/#process-remote-track-removal\n            for (var stream of this._remoteStreams.values()) {\n              if (stream._tracks.includes(track)) {\n                var trackIdx = stream._tracks.indexOf(track);\n                log.debug(`${this._pcId} removetrack ${track.id}`);\n                stream._tracks.splice(trackIdx, 1);\n                stream.dispatchEvent(new _MediaStreamTrackEvent.default('removetrack', {\n                  track\n                }));\n\n                // Dispatch a mute event for the track.\n                track._setMutedInternal(true);\n              }\n            }\n          }\n        });\n        (0, _EventEmitter.addListener)(this, 'peerConnectionGotICECandidate', ev => {\n          if (ev.pcId !== this._pcId) {\n            return;\n          }\n          var sdpInfo = ev.sdp;\n\n          // Can happen when doing a rollback.\n          if (sdpInfo.type && sdpInfo.sdp) {\n            this.localDescription = new _RTCSessionDescription.default(sdpInfo);\n          } else {\n            this.localDescription = null;\n          }\n          var candidate = new _RTCIceCandidate.default(ev.candidate);\n          this.dispatchEvent(new _RTCIceCandidateEvent.default('icecandidate', {\n            candidate\n          }));\n        });\n        (0, _EventEmitter.addListener)(this, 'peerConnectionIceGatheringChanged', ev => {\n          if (ev.pcId !== this._pcId) {\n            return;\n          }\n          this.iceGatheringState = ev.iceGatheringState;\n          if (this.iceGatheringState === 'complete') {\n            var sdpInfo = ev.sdp;\n\n            // Can happen when doing a rollback.\n            if (sdpInfo.type && sdpInfo.sdp) {\n              this.localDescription = new _RTCSessionDescription.default(sdpInfo);\n            } else {\n              this.localDescription = null;\n            }\n            this.dispatchEvent(new _RTCIceCandidateEvent.default('icecandidate', {\n              candidate: null\n            }));\n          }\n          this.dispatchEvent(new _index.Event('icegatheringstatechange'));\n        });\n        (0, _EventEmitter.addListener)(this, 'peerConnectionDidOpenDataChannel', ev => {\n          if (ev.pcId !== this._pcId) {\n            return;\n          }\n          var channel = new _RTCDataChannel.default(ev.dataChannel);\n          this.dispatchEvent(new _RTCDataChannelEvent.default('datachannel', {\n            channel\n          }));\n\n          // Send 'open' event. Native doesn't update the state since it's already\n          // set at this point.\n          channel.dispatchEvent(new _RTCDataChannelEvent.default('open', {\n            channel\n          }));\n        });\n        (0, _EventEmitter.addListener)(this, 'mediaStreamTrackMuteChanged', ev => {\n          if (ev.pcId !== this._pcId) {\n            return;\n          }\n          var _this$getReceivers$ma = this.getReceivers().map(r => r.track).filter(t => t?.id === ev.trackId),\n            _this$getReceivers$ma2 = (0, _slicedToArray2.default)(_this$getReceivers$ma, 1),\n            track = _this$getReceivers$ma2[0];\n          if (track) {\n            track._setMutedInternal(ev.muted);\n          }\n        });\n      }\n\n      /**\n       * Creates a new RTCDataChannel object with the given label. The\n       * RTCDataChannelInit dictionary can be used to configure properties of the\n       * underlying channel such as data reliability.\n       *\n       * @param {string} label - the value with which the label attribute of the new\n       * instance is to be initialized\n       * @param {RTCDataChannelInit} dataChannelDict - an optional dictionary of\n       * values with which to initialize corresponding attributes of the new\n       * instance such as id\n       */\n    }, {\n      key: \"createDataChannel\",\n      value: function createDataChannel(label, dataChannelDict) {\n        if (arguments.length === 0) {\n          throw new TypeError('1 argument required, but 0 present');\n        }\n        if (dataChannelDict && 'id' in dataChannelDict) {\n          var id = dataChannelDict.id;\n          if (typeof id !== 'number') {\n            throw new TypeError('DataChannel id must be a number: ' + id);\n          }\n        }\n        var channelInfo = WebRTCModule.createDataChannel(this._pcId, String(label), dataChannelDict);\n        if (channelInfo === null) {\n          throw new TypeError('Failed to create new DataChannel');\n        }\n        return new _RTCDataChannel.default(channelInfo);\n      }\n\n      /**\n       * Check whether a media stream track exists already in a sender.\n       * See https://w3c.github.io/webrtc-pc/#dom-rtcpeerconnection-addtrack for more information\n       */\n    }, {\n      key: \"_trackExists\",\n      value: function _trackExists(track) {\n        var _this$getSenders$filt3 = this.getSenders().filter(sender => sender.track?.id === track.id),\n          _this$getSenders$filt4 = (0, _slicedToArray2.default)(_this$getSenders$filt3, 1),\n          sender = _this$getSenders$filt4[0];\n        return sender ? true : false;\n      }\n\n      /**\n       * Updates transceivers after offer/answer updates if necessary.\n       */\n    }, {\n      key: \"_updateTransceivers\",\n      value: function _updateTransceivers(transceiverUpdates) {\n        var _this3 = this;\n        var removeStopped = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n        var _loop2 = function (update) {\n          var _this3$getTransceiver = _this3.getTransceivers().filter(t => t.sender.id === update.transceiverId),\n            _this3$getTransceiver2 = (0, _slicedToArray2.default)(_this3$getTransceiver, 1),\n            transceiver = _this3$getTransceiver2[0];\n          if (!transceiver) {\n            return 1; // continue\n          }\n          if (update.currentDirection) {\n            transceiver._currentDirection = update.currentDirection;\n          }\n          transceiver._mid = update.mid;\n          transceiver._stopped = Boolean(update.isStopped);\n          transceiver._sender._rtpParameters = new _RTCRtpSendParameters.default(update.senderRtpParameters);\n          transceiver._receiver._rtpParameters = new _RTCRtpReceiveParameters.default(update.receiverRtpParameters);\n        };\n        for (var update of transceiverUpdates) {\n          if (_loop2(update)) continue;\n        }\n        if (removeStopped) {\n          var stopped = this.getTransceivers().filter(t => t.stopped);\n          var newTransceivers = this._transceivers.filter(t => !stopped.includes(t.transceiver));\n          this._transceivers = newTransceivers;\n        }\n      }\n\n      /**\n       * Inserts transceiver into the transceiver array in the order they are created (timestamp).\n       * @param order an index that refers to when it it was created relatively.\n       * @param transceiver the transceiver object to be inserted.\n       */\n    }, {\n      key: \"_insertTransceiverSorted\",\n      value: function _insertTransceiverSorted(order, transceiver) {\n        this._transceivers.push({\n          order,\n          transceiver\n        });\n        this._transceivers.sort((a, b) => a.order - b.order);\n      }\n    }]);\n  }(_index.EventTarget);\n  /**\n   * Define the `onxxx` event handlers.\n   */\n  var proto = RTCPeerConnection.prototype;\n  (0, _index.defineEventAttribute)(proto, 'connectionstatechange');\n  (0, _index.defineEventAttribute)(proto, 'icecandidate');\n  (0, _index.defineEventAttribute)(proto, 'icecandidateerror');\n  (0, _index.defineEventAttribute)(proto, 'iceconnectionstatechange');\n  (0, _index.defineEventAttribute)(proto, 'icegatheringstatechange');\n  (0, _index.defineEventAttribute)(proto, 'negotiationneeded');\n  (0, _index.defineEventAttribute)(proto, 'signalingstatechange');\n  (0, _index.defineEventAttribute)(proto, 'datachannel');\n  (0, _index.defineEventAttribute)(proto, 'track');\n  (0, _index.defineEventAttribute)(proto, 'error');\n});","lineCount":775,"map":[[14,2,1,0],[14,6,1,0,"_index"],[14,12,1,0],[14,15,1,0,"require"],[14,22,1,0],[14,23,1,0,"_dependencyMap"],[14,37,1,0],[15,2,2,0],[15,6,2,0,"_reactNative"],[15,18,2,0],[15,21,2,0,"require"],[15,28,2,0],[15,29,2,0,"_dependencyMap"],[15,43,2,0],[16,2,4,0],[16,6,4,0,"_EventEmitter"],[16,19,4,0],[16,22,4,0,"require"],[16,29,4,0],[16,30,4,0,"_dependencyMap"],[16,44,4,0],[17,2,5,0],[17,6,5,0,"_Logger"],[17,13,5,0],[17,16,5,0,"_interopRequireDefault"],[17,38,5,0],[17,39,5,0,"require"],[17,46,5,0],[17,47,5,0,"_dependencyMap"],[17,61,5,0],[18,2,6,0],[18,6,6,0,"_MediaStream"],[18,18,6,0],[18,21,6,0,"_interopRequireDefault"],[18,43,6,0],[18,44,6,0,"require"],[18,51,6,0],[18,52,6,0,"_dependencyMap"],[18,66,6,0],[19,2,7,0],[19,6,7,0,"_MediaStreamTrack"],[19,23,7,0],[19,26,7,0,"_interopRequireDefault"],[19,48,7,0],[19,49,7,0,"require"],[19,56,7,0],[19,57,7,0,"_dependencyMap"],[19,71,7,0],[20,2,8,0],[20,6,8,0,"_MediaStreamTrackEvent"],[20,28,8,0],[20,31,8,0,"_interopRequireDefault"],[20,53,8,0],[20,54,8,0,"require"],[20,61,8,0],[20,62,8,0,"_dependencyMap"],[20,76,8,0],[21,2,9,0],[21,6,9,0,"_RTCDataChannel"],[21,21,9,0],[21,24,9,0,"_interopRequireDefault"],[21,46,9,0],[21,47,9,0,"require"],[21,54,9,0],[21,55,9,0,"_dependencyMap"],[21,69,9,0],[22,2,10,0],[22,6,10,0,"_RTCDataChannelEvent"],[22,26,10,0],[22,29,10,0,"_interopRequireDefault"],[22,51,10,0],[22,52,10,0,"require"],[22,59,10,0],[22,60,10,0,"_dependencyMap"],[22,74,10,0],[23,2,11,0],[23,6,11,0,"_RTCIceCandidate"],[23,22,11,0],[23,25,11,0,"_interopRequireDefault"],[23,47,11,0],[23,48,11,0,"require"],[23,55,11,0],[23,56,11,0,"_dependencyMap"],[23,70,11,0],[24,2,12,0],[24,6,12,0,"_RTCIceCandidateEvent"],[24,27,12,0],[24,30,12,0,"_interopRequireDefault"],[24,52,12,0],[24,53,12,0,"require"],[24,60,12,0],[24,61,12,0,"_dependencyMap"],[24,75,12,0],[25,2,13,0],[25,6,13,0,"_RTCRtpReceiveParameters"],[25,30,13,0],[25,33,13,0,"_interopRequireDefault"],[25,55,13,0],[25,56,13,0,"require"],[25,63,13,0],[25,64,13,0,"_dependencyMap"],[25,78,13,0],[26,2,14,0],[26,6,14,0,"_RTCRtpReceiver"],[26,21,14,0],[26,24,14,0,"_interopRequireDefault"],[26,46,14,0],[26,47,14,0,"require"],[26,54,14,0],[26,55,14,0,"_dependencyMap"],[26,69,14,0],[27,2,15,0],[27,6,15,0,"_RTCRtpSendParameters"],[27,27,15,0],[27,30,15,0,"_interopRequireDefault"],[27,52,15,0],[27,53,15,0,"require"],[27,60,15,0],[27,61,15,0,"_dependencyMap"],[27,75,15,0],[28,2,16,0],[28,6,16,0,"_RTCRtpSender"],[28,19,16,0],[28,22,16,0,"_interopRequireDefault"],[28,44,16,0],[28,45,16,0,"require"],[28,52,16,0],[28,53,16,0,"_dependencyMap"],[28,67,16,0],[29,2,17,0],[29,6,17,0,"_RTCRtpTransceiver"],[29,24,17,0],[29,27,17,0,"_interopRequireDefault"],[29,49,17,0],[29,50,17,0,"require"],[29,57,17,0],[29,58,17,0,"_dependencyMap"],[29,72,17,0],[30,2,18,0],[30,6,18,0,"_RTCSessionDescription"],[30,28,18,0],[30,31,18,0,"_interopRequireDefault"],[30,53,18,0],[30,54,18,0,"require"],[30,61,18,0],[30,62,18,0,"_dependencyMap"],[30,76,18,0],[31,2,19,0],[31,6,19,0,"_RTCTrackEvent"],[31,20,19,0],[31,23,19,0,"_interopRequireDefault"],[31,45,19,0],[31,46,19,0,"require"],[31,53,19,0],[31,54,19,0,"_dependencyMap"],[31,68,19,0],[32,2,20,0],[32,6,20,0,"RTCUtil"],[32,13,20,0],[32,16,20,0,"_interopRequireWildcard"],[32,39,20,0],[32,40,20,0,"require"],[32,47,20,0],[32,48,20,0,"_dependencyMap"],[32,62,20,0],[33,2,20,37],[33,11,20,37,"_interopRequireWildcard"],[33,35,20,37,"e"],[33,36,20,37],[33,38,20,37,"t"],[33,39,20,37],[33,68,20,37,"WeakMap"],[33,75,20,37],[33,81,20,37,"r"],[33,82,20,37],[33,89,20,37,"WeakMap"],[33,96,20,37],[33,100,20,37,"n"],[33,101,20,37],[33,108,20,37,"WeakMap"],[33,115,20,37],[33,127,20,37,"_interopRequireWildcard"],[33,150,20,37],[33,162,20,37,"_interopRequireWildcard"],[33,163,20,37,"e"],[33,164,20,37],[33,166,20,37,"t"],[33,167,20,37],[33,176,20,37,"t"],[33,177,20,37],[33,181,20,37,"e"],[33,182,20,37],[33,186,20,37,"e"],[33,187,20,37],[33,188,20,37,"__esModule"],[33,198,20,37],[33,207,20,37,"e"],[33,208,20,37],[33,214,20,37,"o"],[33,215,20,37],[33,217,20,37,"i"],[33,218,20,37],[33,220,20,37,"f"],[33,221,20,37],[33,226,20,37,"__proto__"],[33,235,20,37],[33,243,20,37,"default"],[33,250,20,37],[33,252,20,37,"e"],[33,253,20,37],[33,270,20,37,"e"],[33,271,20,37],[33,294,20,37,"e"],[33,295,20,37],[33,320,20,37,"e"],[33,321,20,37],[33,330,20,37,"f"],[33,331,20,37],[33,337,20,37,"o"],[33,338,20,37],[33,341,20,37,"t"],[33,342,20,37],[33,345,20,37,"n"],[33,346,20,37],[33,349,20,37,"r"],[33,350,20,37],[33,358,20,37,"o"],[33,359,20,37],[33,360,20,37,"has"],[33,363,20,37],[33,364,20,37,"e"],[33,365,20,37],[33,375,20,37,"o"],[33,376,20,37],[33,377,20,37,"get"],[33,380,20,37],[33,381,20,37,"e"],[33,382,20,37],[33,385,20,37,"o"],[33,386,20,37],[33,387,20,37,"set"],[33,390,20,37],[33,391,20,37,"e"],[33,392,20,37],[33,394,20,37,"f"],[33,395,20,37],[33,409,20,37,"_t"],[33,411,20,37],[33,415,20,37,"e"],[33,416,20,37],[33,432,20,37,"_t"],[33,434,20,37],[33,441,20,37,"hasOwnProperty"],[33,455,20,37],[33,456,20,37,"call"],[33,460,20,37],[33,461,20,37,"e"],[33,462,20,37],[33,464,20,37,"_t"],[33,466,20,37],[33,473,20,37,"i"],[33,474,20,37],[33,478,20,37,"o"],[33,479,20,37],[33,482,20,37,"Object"],[33,488,20,37],[33,489,20,37,"defineProperty"],[33,503,20,37],[33,508,20,37,"Object"],[33,514,20,37],[33,515,20,37,"getOwnPropertyDescriptor"],[33,539,20,37],[33,540,20,37,"e"],[33,541,20,37],[33,543,20,37,"_t"],[33,545,20,37],[33,552,20,37,"i"],[33,553,20,37],[33,554,20,37,"get"],[33,557,20,37],[33,561,20,37,"i"],[33,562,20,37],[33,563,20,37,"set"],[33,566,20,37],[33,570,20,37,"o"],[33,571,20,37],[33,572,20,37,"f"],[33,573,20,37],[33,575,20,37,"_t"],[33,577,20,37],[33,579,20,37,"i"],[33,580,20,37],[33,584,20,37,"f"],[33,585,20,37],[33,586,20,37,"_t"],[33,588,20,37],[33,592,20,37,"e"],[33,593,20,37],[33,594,20,37,"_t"],[33,596,20,37],[33,607,20,37,"f"],[33,608,20,37],[33,613,20,37,"e"],[33,614,20,37],[33,616,20,37,"t"],[33,617,20,37],[34,2,20,37],[34,11,20,37,"_callSuper"],[34,22,20,37,"t"],[34,23,20,37],[34,25,20,37,"o"],[34,26,20,37],[34,28,20,37,"e"],[34,29,20,37],[34,40,20,37,"o"],[34,41,20,37],[34,48,20,37,"_getPrototypeOf2"],[34,64,20,37],[34,65,20,37,"default"],[34,72,20,37],[34,74,20,37,"o"],[34,75,20,37],[34,82,20,37,"_possibleConstructorReturn2"],[34,109,20,37],[34,110,20,37,"default"],[34,117,20,37],[34,119,20,37,"t"],[34,120,20,37],[34,122,20,37,"_isNativeReflectConstruct"],[34,147,20,37],[34,152,20,37,"Reflect"],[34,159,20,37],[34,160,20,37,"construct"],[34,169,20,37],[34,170,20,37,"o"],[34,171,20,37],[34,173,20,37,"e"],[34,174,20,37],[34,186,20,37,"_getPrototypeOf2"],[34,202,20,37],[34,203,20,37,"default"],[34,210,20,37],[34,212,20,37,"t"],[34,213,20,37],[34,215,20,37,"constructor"],[34,226,20,37],[34,230,20,37,"o"],[34,231,20,37],[34,232,20,37,"apply"],[34,237,20,37],[34,238,20,37,"t"],[34,239,20,37],[34,241,20,37,"e"],[34,242,20,37],[35,2,20,37],[35,11,20,37,"_isNativeReflectConstruct"],[35,37,20,37],[35,51,20,37,"t"],[35,52,20,37],[35,56,20,37,"Boolean"],[35,63,20,37],[35,64,20,37,"prototype"],[35,73,20,37],[35,74,20,37,"valueOf"],[35,81,20,37],[35,82,20,37,"call"],[35,86,20,37],[35,87,20,37,"Reflect"],[35,94,20,37],[35,95,20,37,"construct"],[35,104,20,37],[35,105,20,37,"Boolean"],[35,112,20,37],[35,145,20,37,"t"],[35,146,20,37],[35,159,20,37,"_isNativeReflectConstruct"],[35,184,20,37],[35,196,20,37,"_isNativeReflectConstruct"],[35,197,20,37],[35,210,20,37,"t"],[35,211,20,37],[36,2,23,0],[36,6,23,6,"log"],[36,9,23,9],[36,12,23,12],[36,16,23,16,"Logger"],[36,31,23,22],[36,32,23,23],[36,36,23,27],[36,37,23,28],[37,2,24,0],[37,6,24,8,"WebRTCModule"],[37,18,24,20],[37,21,24,25,"NativeModules"],[37,47,24,38],[37,48,24,8,"WebRTCModule"],[37,60,24,20],[38,2,77,0],[38,6,77,4,"nextPeerConnectionId"],[38,26,77,24],[38,29,77,27],[38,30,77,28],[39,2,77,29],[39,6,79,21,"RTCPeerConnection"],[39,23,79,38],[39,26,79,38,"exports"],[39,33,79,38],[39,34,79,38,"default"],[39,41,79,38],[39,67,79,38,"_EventTarget"],[39,79,79,38],[40,4,92,4],[40,13,92,4,"RTCPeerConnection"],[40,31,92,16,"configuration"],[40,44,92,48],[40,46,92,50],[41,6,92,50],[41,10,92,50,"_this"],[41,15,92,50],[42,6,92,50],[42,10,92,50,"_classCallCheck2"],[42,26,92,50],[42,27,92,50,"default"],[42,34,92,50],[42,42,92,50,"RTCPeerConnection"],[42,59,92,50],[43,6,93,8,"_this"],[43,11,93,8],[43,14,93,8,"_callSuper"],[43,24,93,8],[43,31,93,8,"RTCPeerConnection"],[43,48,93,8],[44,6,93,16,"_this"],[44,11,93,16],[44,12,80,4,"localDescription"],[44,28,80,20],[44,31,80,53],[44,35,80,57],[45,6,80,57,"_this"],[45,11,80,57],[45,12,81,4,"remoteDescription"],[45,29,81,21],[45,32,81,54],[45,36,81,58],[46,6,81,58,"_this"],[46,11,81,58],[46,12,82,4,"signalingState"],[46,26,82,18],[46,29,82,40],[46,37,82,48],[47,6,82,48,"_this"],[47,11,82,48],[47,12,83,4,"iceGatheringState"],[47,29,83,21],[47,32,83,46],[47,37,83,51],[48,6,83,51,"_this"],[48,11,83,51],[48,12,84,4,"connectionState"],[48,27,84,19],[48,30,84,46],[48,35,84,51],[49,6,84,51,"_this"],[49,11,84,51],[49,12,85,4,"iceConnectionState"],[49,30,85,22],[49,33,85,48],[49,38,85,53],[50,6,95,8,"_this"],[50,11,95,8],[50,12,95,13,"_pcId"],[50,17,95,18],[50,20,95,21,"nextPeerConnectionId"],[50,40,95,41],[50,42,95,43],[52,6,97,8],[53,6,98,8],[53,10,98,12,"configuration"],[53,23,98,25],[53,25,98,27],[54,8,99,12],[54,12,99,18,"servers"],[54,19,99,25],[54,22,99,28,"configuration"],[54,35,99,41],[54,37,99,43,"iceServers"],[54,47,99,53],[54,51,99,57],[54,53,99,59],[55,8,101,12],[55,13,101,17],[55,17,101,23,"server"],[55,23,101,29],[55,27,101,33,"servers"],[55,34,101,40],[55,36,101,42],[56,10,102,16],[56,14,102,20,"urls"],[56,18,102,24],[56,21,102,27,"server"],[56,27,102,33],[56,28,102,34,"url"],[56,31,102,37],[56,35,102,41,"server"],[56,41,102,47],[56,42,102,48,"urls"],[56,46,102,52],[57,10,104,16],[57,17,104,23,"server"],[57,23,104,29],[57,24,104,30,"url"],[57,27,104,33],[58,10,105,16],[58,17,105,23,"server"],[58,23,105,29],[58,24,105,30,"urls"],[58,28,105,34],[59,10,107,16],[59,14,107,20],[59,15,107,21,"urls"],[59,19,107,25],[59,21,107,27],[60,12,108,20],[61,10,109,16],[62,10,111,16],[62,14,111,20],[62,15,111,21,"Array"],[62,20,111,26],[62,21,111,27,"isArray"],[62,28,111,34],[62,29,111,35,"urls"],[62,33,111,39],[62,34,111,40],[62,36,111,42],[63,12,112,20,"urls"],[63,16,112,24],[63,19,112,27],[63,20,112,29,"urls"],[63,24,112,33],[63,25,112,35],[64,10,113,16],[66,10,115,16],[67,10,116,16,"server"],[67,16,116,22],[67,17,116,23,"urls"],[67,21,116,27],[67,24,116,30,"urls"],[67,28,116,34],[67,29,116,35,"map"],[67,32,116,38],[67,33,116,39,"url"],[67,36,116,42],[67,40,116,46,"url"],[67,43,116,49],[67,44,116,50,"toLowerCase"],[67,55,116,61],[67,56,116,62],[67,57,116,63],[67,58,116,64],[68,8,117,12],[70,8,119,12],[71,8,120,12,"configuration"],[71,21,120,25],[71,22,120,26,"iceServers"],[71,32,120,36],[71,35,120,39,"servers"],[71,42,120,46],[71,43,120,47,"filter"],[71,49,120,53],[71,50,120,54,"s"],[71,51,120,55],[71,55,120,59,"s"],[71,56,120,60],[71,57,120,61,"urls"],[71,61,120,65],[71,62,120,66],[72,6,121,8],[73,6,123,8],[73,10,123,12],[73,11,123,13,"WebRTCModule"],[73,23,123,25],[73,24,123,26,"peerConnectionInit"],[73,42,123,44],[73,43,123,45,"configuration"],[73,56,123,58],[73,58,123,60,"_this"],[73,63,123,60],[73,64,123,65,"_pcId"],[73,69,123,70],[73,70,123,71],[73,72,123,73],[74,8,124,12],[74,14,124,18],[74,18,124,22,"Error"],[74,23,124,27],[74,24,124,28],[74,85,124,89],[74,86,124,90],[75,6,125,8],[76,6,127,8,"_this"],[76,11,127,8],[76,12,127,13,"_transceivers"],[76,25,127,26],[76,28,127,29],[76,30,127,31],[77,6,128,8,"_this"],[77,11,128,8],[77,12,128,13,"_remoteStreams"],[77,26,128,27],[77,29,128,30],[77,33,128,34,"Map"],[77,36,128,37],[77,37,128,38],[77,38,128,39],[78,6,129,8,"_this"],[78,11,129,8],[78,12,129,13,"_pendingTrackEvents"],[78,31,129,32],[78,34,129,35],[78,36,129,37],[79,6,131,8,"_this"],[79,11,131,8],[79,12,131,13,"_registerEvents"],[79,27,131,28],[79,28,131,29],[79,29,131,30],[80,6,133,8,"log"],[80,9,133,11],[80,10,133,12,"debug"],[80,15,133,17],[80,16,133,18],[80,19,133,21,"_this"],[80,24,133,21],[80,25,133,26,"_pcId"],[80,30,133,31],[80,37,133,38],[80,38,133,39],[81,6,133,40],[81,13,133,40,"_this"],[81,18,133,40],[82,4,134,4],[83,4,134,5],[83,8,134,5,"_inherits2"],[83,18,134,5],[83,19,134,5,"default"],[83,26,134,5],[83,28,134,5,"RTCPeerConnection"],[83,45,134,5],[83,47,134,5,"_EventTarget"],[83,59,134,5],[84,4,134,5],[84,15,134,5,"_createClass2"],[84,28,134,5],[84,29,134,5,"default"],[84,36,134,5],[84,38,134,5,"RTCPeerConnection"],[84,55,134,5],[85,6,134,5,"key"],[85,9,134,5],[86,6,134,5,"value"],[86,11,134,5],[87,8,134,5],[87,12,134,5,"_createOffer"],[87,24,134,5],[87,31,134,5,"_asyncToGenerator2"],[87,49,134,5],[87,50,134,5,"default"],[87,57,134,5],[87,59,136,4],[87,70,136,22,"options"],[87,77,136,46],[87,79,136,48],[88,10,137,8,"log"],[88,13,137,11],[88,14,137,12,"debug"],[88,19,137,17],[88,20,137,18],[88,23,137,21],[88,27,137,25],[88,28,137,26,"_pcId"],[88,33,137,31],[88,47,137,45],[88,48,137,46],[89,10,139,8],[89,14,139,8,"_yield$WebRTCModule$p"],[89,35,139,8],[89,44,143,18,"WebRTCModule"],[89,56,143,30],[89,57,143,31,"peerConnectionCreateOffer"],[89,82,143,56],[89,83,143,57],[89,87,143,61],[89,88,143,62,"_pcId"],[89,93,143,67],[89,95,143,69,"RTCUtil"],[89,102,143,76],[89,103,143,77,"normalizeOfferOptions"],[89,124,143,98],[89,125,143,99,"options"],[89,132,143,106],[89,133,143,107],[89,134,143,108],[90,12,140,12,"sdpInfo"],[90,19,140,19],[90,22,140,19,"_yield$WebRTCModule$p"],[90,43,140,19],[90,44,140,12,"sdpInfo"],[90,51,140,19],[91,12,141,12,"newTransceivers"],[91,27,141,27],[91,30,141,27,"_yield$WebRTCModule$p"],[91,51,141,27],[91,52,141,12,"newTransceivers"],[91,67,141,27],[92,12,142,12,"transceiversInfo"],[92,28,142,28],[92,31,142,28,"_yield$WebRTCModule$p"],[92,52,142,28],[92,53,142,12,"transceiversInfo"],[92,69,142,28],[93,10,145,8,"log"],[93,13,145,11],[93,14,145,12,"debug"],[93,19,145,17],[93,20,145,18],[93,23,145,21],[93,27,145,25],[93,28,145,26,"_pcId"],[93,33,145,31],[93,50,145,48],[93,51,145,49],[94,10,147,8,"newTransceivers"],[94,25,147,23],[94,27,147,25,"forEach"],[94,34,147,32],[94,35,147,33,"t"],[94,36,147,34],[94,40,147,38],[95,12,148,12],[95,16,148,20,"transceiverOrder"],[95,32,148,36],[95,35,148,54,"t"],[95,36,148,55],[95,37,148,20,"transceiverOrder"],[95,53,148,36],[96,14,148,38,"transceiver"],[96,25,148,49],[96,28,148,54,"t"],[96,29,148,55],[96,30,148,38,"transceiver"],[96,41,148,49],[97,12,149,12],[97,16,149,18,"newSender"],[97,25,149,27],[97,28,149,30],[97,32,149,34,"RTCRtpSender"],[97,53,149,46],[97,54,149,47],[98,14,149,49],[98,17,149,52,"transceiver"],[98,28,149,63],[98,29,149,64,"sender"],[98,35,149,70],[99,14,149,72,"track"],[99,19,149,77],[99,21,149,79],[100,12,149,84],[100,13,149,85],[100,14,149,86],[101,12,150,12],[101,16,150,18,"remoteTrack"],[101,27,150,29],[101,30,151,18,"transceiver"],[101,41,151,29],[101,42,151,30,"receiver"],[101,50,151,38],[101,51,151,39,"track"],[101,56,151,44],[101,59,151,47],[101,63,151,51,"MediaStreamTrack"],[101,88,151,67],[101,89,151,68,"transceiver"],[101,100,151,79],[101,101,151,80,"receiver"],[101,109,151,88],[101,110,151,89,"track"],[101,115,151,94],[101,116,151,95],[101,119,151,98],[101,123,151,102],[102,12,152,12],[102,16,152,18,"newReceiver"],[102,27,152,29],[102,30,152,32],[102,34,152,36,"RTCRtpReceiver"],[102,57,152,50],[102,58,152,51],[103,14,152,53],[103,17,152,56,"transceiver"],[103,28,152,67],[103,29,152,68,"receiver"],[103,37,152,76],[104,14,152,78,"track"],[104,19,152,83],[104,21,152,85,"remoteTrack"],[105,12,152,97],[105,13,152,98],[105,14,152,99],[106,12,153,12],[106,16,153,18,"newTransceiver"],[106,30,153,32],[106,33,153,35],[106,37,153,39,"RTCRtpTransceiver"],[106,63,153,56],[106,64,153,57],[107,14,154,16],[107,17,154,19,"transceiver"],[107,28,154,30],[108,14,155,16,"sender"],[108,20,155,22],[108,22,155,24,"newSender"],[108,31,155,33],[109,14,156,16,"receiver"],[109,22,156,24],[109,24,156,26,"newReceiver"],[110,12,157,12],[110,13,157,13],[110,14,157,14],[111,12,159,12],[111,16,159,16],[111,17,159,17,"_insertTransceiverSorted"],[111,41,159,41],[111,42,159,42,"transceiverOrder"],[111,58,159,58],[111,60,159,60,"newTransceiver"],[111,74,159,74],[111,75,159,75],[112,10,160,8],[112,11,160,9],[112,12,160,10],[113,10,162,8],[113,14,162,12],[113,15,162,13,"_updateTransceivers"],[113,34,162,32],[113,35,162,33,"transceiversInfo"],[113,51,162,49],[113,52,162,50],[114,10,164,8],[114,17,164,15,"sdpInfo"],[114,24,164,22],[115,8,165,4],[115,9,165,5],[116,8,165,5],[116,17,136,10,"createOffer"],[116,28,136,21,"createOffer"],[116,29,136,21,"_x"],[116,31,136,21],[117,10,136,21],[117,17,136,21,"_createOffer"],[117,29,136,21],[117,30,136,21,"apply"],[117,35,136,21],[117,42,136,21,"arguments"],[117,51,136,21],[118,8,136,21],[119,8,136,21],[119,15,136,10,"createOffer"],[119,26,136,21],[120,6,136,21],[121,4,136,21],[122,6,136,21,"key"],[122,9,136,21],[123,6,136,21,"value"],[123,11,136,21],[124,8,136,21],[124,12,136,21,"_createAnswer"],[124,25,136,21],[124,32,136,21,"_asyncToGenerator2"],[124,50,136,21],[124,51,136,21,"default"],[124,58,136,21],[124,60,167,4],[124,73,167,25],[125,10,168,8,"log"],[125,13,168,11],[125,14,168,12,"debug"],[125,19,168,17],[125,20,168,18],[125,23,168,21],[125,27,168,25],[125,28,168,26,"_pcId"],[125,33,168,31],[125,48,168,46],[125,49,168,47],[126,10,170,8],[126,14,170,8,"_yield$WebRTCModule$p2"],[126,36,170,8],[126,45,173,18,"WebRTCModule"],[126,57,173,30],[126,58,173,31,"peerConnectionCreateAnswer"],[126,84,173,57],[126,85,173,58],[126,89,173,62],[126,90,173,63,"_pcId"],[126,95,173,68],[126,97,173,70],[126,98,173,71],[126,99,173,72],[126,100,173,73],[127,12,171,12,"sdpInfo"],[127,19,171,19],[127,22,171,19,"_yield$WebRTCModule$p2"],[127,44,171,19],[127,45,171,12,"sdpInfo"],[127,52,171,19],[128,12,172,12,"transceiversInfo"],[128,28,172,28],[128,31,172,28,"_yield$WebRTCModule$p2"],[128,53,172,28],[128,54,172,12,"transceiversInfo"],[128,70,172,28],[129,10,175,8],[129,14,175,12],[129,15,175,13,"_updateTransceivers"],[129,34,175,32],[129,35,175,33,"transceiversInfo"],[129,51,175,49],[129,52,175,50],[130,10,177,8],[130,17,177,15,"sdpInfo"],[130,24,177,22],[131,8,178,4],[131,9,178,5],[132,8,178,5],[132,17,167,10,"createAnswer"],[132,29,167,22,"createAnswer"],[132,30,167,22],[133,10,167,22],[133,17,167,22,"_createAnswer"],[133,30,167,22],[133,31,167,22,"apply"],[133,36,167,22],[133,43,167,22,"arguments"],[133,52,167,22],[134,8,167,22],[135,8,167,22],[135,15,167,10,"createAnswer"],[135,27,167,22],[136,6,167,22],[137,4,167,22],[138,6,167,22,"key"],[138,9,167,22],[139,6,167,22,"value"],[139,11,167,22],[139,13,180,4],[139,22,180,4,"setConfiguration"],[139,38,180,20,"setConfiguration"],[139,39,180,21,"configuration"],[139,52,180,34],[139,54,180,42],[140,8,181,8,"WebRTCModule"],[140,20,181,20],[140,21,181,21,"peerConnectionSetConfiguration"],[140,51,181,51],[140,52,181,52,"configuration"],[140,65,181,65],[140,67,181,67],[140,71,181,71],[140,72,181,72,"_pcId"],[140,77,181,77],[140,78,181,78],[141,6,182,4],[142,4,182,5],[143,6,182,5,"key"],[143,9,182,5],[144,6,182,5,"value"],[144,11,182,5],[145,8,182,5],[145,12,182,5,"_setLocalDescription"],[145,32,182,5],[145,39,182,5,"_asyncToGenerator2"],[145,57,182,5],[145,58,182,5,"default"],[145,65,182,5],[145,67,184,4],[145,78,184,30,"sessionDescription"],[145,96,184,100],[145,98,184,117],[146,10,185,8,"log"],[146,13,185,11],[146,14,185,12,"debug"],[146,19,185,17],[146,20,185,18],[146,23,185,21],[146,27,185,25],[146,28,185,26,"_pcId"],[146,33,185,31],[146,55,185,53],[146,56,185,54],[147,10,187,8],[147,14,187,12,"desc"],[147,18,187,16],[148,10,189,8],[148,14,189,12,"sessionDescription"],[148,32,189,30],[148,34,189,32],[149,12,190,12,"desc"],[149,16,190,16],[149,19,190,19],[150,14,191,16,"type"],[150,18,191,20],[150,20,191,22,"sessionDescription"],[150,38,191,40],[150,39,191,41,"type"],[150,43,191,45],[151,14,192,16,"sdp"],[151,17,192,19],[151,19,192,21,"sessionDescription"],[151,37,192,39],[151,38,192,40,"sdp"],[151,41,192,43],[151,45,192,47],[152,12,193,12],[152,13,193,13],[153,12,195,12],[153,16,195,16],[153,17,195,17,"RTCUtil"],[153,24,195,24],[153,25,195,25,"isSdpTypeValid"],[153,39,195,39],[153,40,195,40,"desc"],[153,44,195,44],[153,45,195,45,"type"],[153,49,195,49],[153,50,195,50],[153,52,195,52],[154,14,196,16],[154,20,196,22],[154,24,196,26,"Error"],[154,29,196,31],[154,30,196,32],[154,76,196,78,"desc"],[154,80,196,82],[154,81,196,83,"type"],[154,85,196,87],[154,87,196,89],[154,88,196,90],[155,12,197,12],[156,10,198,8],[156,11,198,9],[156,17,198,15],[157,12,199,12,"desc"],[157,16,199,16],[157,19,199,19],[157,23,199,23],[158,10,200,8],[159,10,202,8],[159,14,202,8,"_yield$WebRTCModule$p3"],[159,36,202,8],[159,45,205,18,"WebRTCModule"],[159,57,205,30],[159,58,205,31,"peerConnectionSetLocalDescription"],[159,91,205,64],[159,92,205,65],[159,96,205,69],[159,97,205,70,"_pcId"],[159,102,205,75],[159,104,205,77,"desc"],[159,108,205,81],[159,109,205,82],[160,12,203,12,"sdpInfo"],[160,19,203,19],[160,22,203,19,"_yield$WebRTCModule$p3"],[160,44,203,19],[160,45,203,12,"sdpInfo"],[160,52,203,19],[161,12,204,12,"transceiversInfo"],[161,28,204,28],[161,31,204,28,"_yield$WebRTCModule$p3"],[161,53,204,28],[161,54,204,12,"transceiversInfo"],[161,70,204,28],[162,10,207,8],[162,14,207,12,"sdpInfo"],[162,21,207,19],[162,22,207,20,"type"],[162,26,207,24],[162,30,207,28,"sdpInfo"],[162,37,207,35],[162,38,207,36,"sdp"],[162,41,207,39],[162,43,207,41],[163,12,208,12],[163,16,208,16],[163,17,208,17,"localDescription"],[163,33,208,33],[163,36,208,36],[163,40,208,40,"RTCSessionDescription"],[163,70,208,61],[163,71,208,62,"sdpInfo"],[163,78,208,69],[163,79,208,70],[164,10,209,8],[164,11,209,9],[164,17,209,15],[165,12,210,12],[165,16,210,16],[165,17,210,17,"localDescription"],[165,33,210,33],[165,36,210,36],[165,40,210,40],[166,10,211,8],[167,10,213,8],[167,14,213,12],[167,15,213,13,"_updateTransceivers"],[167,34,213,32],[167,35,213,33,"transceiversInfo"],[167,51,213,49],[167,53,213,51],[167,72,213,71,"desc"],[167,76,213,75],[167,78,213,77,"type"],[167,82,213,81],[167,87,213,86],[167,95,213,94],[167,96,213,95],[168,10,215,8,"log"],[168,13,215,11],[168,14,215,12,"debug"],[168,19,215,17],[168,20,215,18],[168,23,215,21],[168,27,215,25],[168,28,215,26,"_pcId"],[168,33,215,31],[168,58,215,56],[168,59,215,57],[169,8,216,4],[169,9,216,5],[170,8,216,5],[170,17,184,10,"setLocalDescription"],[170,36,184,29,"setLocalDescription"],[170,37,184,29,"_x2"],[170,40,184,29],[171,10,184,29],[171,17,184,29,"_setLocalDescription"],[171,37,184,29],[171,38,184,29,"apply"],[171,43,184,29],[171,50,184,29,"arguments"],[171,59,184,29],[172,8,184,29],[173,8,184,29],[173,15,184,10,"setLocalDescription"],[173,34,184,29],[174,6,184,29],[175,4,184,29],[176,6,184,29,"key"],[176,9,184,29],[177,6,184,29,"value"],[177,11,184,29],[178,8,184,29],[178,12,184,29,"_setRemoteDescription"],[178,33,184,29],[178,40,184,29,"_asyncToGenerator2"],[178,58,184,29],[178,59,184,29,"default"],[178,66,184,29],[178,68,218,4],[178,79,218,31,"sessionDescription"],[178,97,218,100],[178,99,218,117],[179,10,218,117],[179,14,218,117,"_this2"],[179,20,218,117],[180,10,219,8,"log"],[180,13,219,11],[180,14,219,12,"debug"],[180,19,219,17],[180,20,219,18],[180,23,219,21],[180,27,219,25],[180,28,219,26,"_pcId"],[180,33,219,31],[180,56,219,54],[180,57,219,55],[181,10,221,8],[181,14,221,12],[181,15,221,13,"sessionDescription"],[181,33,221,31],[181,35,221,33],[182,12,222,12],[182,19,222,19,"Promise"],[182,26,222,26],[182,27,222,27,"reject"],[182,33,222,33],[182,34,222,34],[182,38,222,38,"Error"],[182,43,222,43],[182,44,222,44],[182,77,222,77],[182,78,222,78],[182,79,222,79],[183,10,223,8],[184,10,225,8],[184,14,225,14,"desc"],[184,18,225,18],[184,21,225,21],[185,12,226,12,"type"],[185,16,226,16],[185,18,226,18,"sessionDescription"],[185,36,226,36],[185,37,226,37,"type"],[185,41,226,41],[186,12,227,12,"sdp"],[186,15,227,15],[186,17,227,17,"sessionDescription"],[186,35,227,35],[186,36,227,36,"sdp"],[186,39,227,39],[186,43,227,43],[187,10,228,8],[187,11,228,9],[188,10,230,8],[188,14,230,12],[188,15,230,13,"RTCUtil"],[188,22,230,20],[188,23,230,21,"isSdpTypeValid"],[188,37,230,35],[188,38,230,36,"desc"],[188,42,230,40],[188,43,230,41,"type"],[188,47,230,45],[188,51,230,49],[188,53,230,51],[188,54,230,52],[188,56,230,54],[189,12,231,12],[189,18,231,18],[189,22,231,22,"Error"],[189,27,231,27],[189,28,231,28],[189,74,231,74,"desc"],[189,78,231,78],[189,79,231,79,"type"],[189,83,231,83],[189,85,231,85],[189,86,231,86],[190,10,232,8],[191,10,234,8],[191,14,234,8,"_yield$WebRTCModule$p4"],[191,36,234,8],[191,45,238,18,"WebRTCModule"],[191,57,238,30],[191,58,238,31,"peerConnectionSetRemoteDescription"],[191,92,238,65],[191,93,238,66],[191,97,238,70],[191,98,238,71,"_pcId"],[191,103,238,76],[191,105,238,78,"desc"],[191,109,238,82],[191,110,238,83],[192,12,235,12,"sdpInfo"],[192,19,235,19],[192,22,235,19,"_yield$WebRTCModule$p4"],[192,44,235,19],[192,45,235,12,"sdpInfo"],[192,52,235,19],[193,12,236,12,"newTransceivers"],[193,27,236,27],[193,30,236,27,"_yield$WebRTCModule$p4"],[193,52,236,27],[193,53,236,12,"newTransceivers"],[193,68,236,27],[194,12,237,12,"transceiversInfo"],[194,28,237,28],[194,31,237,28,"_yield$WebRTCModule$p4"],[194,53,237,28],[194,54,237,12,"transceiversInfo"],[194,70,237,28],[195,10,240,8],[195,14,240,12,"sdpInfo"],[195,21,240,19],[195,22,240,20,"type"],[195,26,240,24],[195,30,240,28,"sdpInfo"],[195,37,240,35],[195,38,240,36,"sdp"],[195,41,240,39],[195,43,240,41],[196,12,241,12],[196,16,241,16],[196,17,241,17,"remoteDescription"],[196,34,241,34],[196,37,241,37],[196,41,241,41,"RTCSessionDescription"],[196,71,241,62],[196,72,241,63,"sdpInfo"],[196,79,241,70],[196,80,241,71],[197,10,242,8],[197,11,242,9],[197,17,242,15],[198,12,243,12],[198,16,243,16],[198,17,243,17,"remoteDescription"],[198,34,243,34],[198,37,243,37],[198,41,243,41],[199,10,244,8],[200,10,246,8,"newTransceivers"],[200,25,246,23],[200,27,246,25,"forEach"],[200,34,246,32],[200,35,246,33,"t"],[200,36,246,34],[200,40,246,38],[201,12,247,12],[201,16,247,20,"transceiverOrder"],[201,32,247,36],[201,35,247,54,"t"],[201,36,247,55],[201,37,247,20,"transceiverOrder"],[201,53,247,36],[202,14,247,38,"transceiver"],[202,25,247,49],[202,28,247,54,"t"],[202,29,247,55],[202,30,247,38,"transceiver"],[202,41,247,49],[203,12,248,12],[203,16,248,18,"newSender"],[203,25,248,27],[203,28,248,30],[203,32,248,34,"RTCRtpSender"],[203,53,248,46],[203,54,248,47],[204,14,248,49],[204,17,248,52,"transceiver"],[204,28,248,63],[204,29,248,64,"sender"],[204,35,248,70],[205,14,248,72,"track"],[205,19,248,77],[205,21,248,79],[206,12,248,84],[206,13,248,85],[206,14,248,86],[207,12,249,12],[207,16,249,18,"remoteTrack"],[207,27,249,29],[207,30,250,18,"transceiver"],[207,41,250,29],[207,42,250,30,"receiver"],[207,50,250,38],[207,51,250,39,"track"],[207,56,250,44],[207,59,250,47],[207,63,250,51,"MediaStreamTrack"],[207,88,250,67],[207,89,250,68,"transceiver"],[207,100,250,79],[207,101,250,80,"receiver"],[207,109,250,88],[207,110,250,89,"track"],[207,115,250,94],[207,116,250,95],[207,119,250,98],[207,123,250,102],[208,12,251,12],[208,16,251,18,"newReceiver"],[208,27,251,29],[208,30,251,32],[208,34,251,36,"RTCRtpReceiver"],[208,57,251,50],[208,58,251,51],[209,14,251,53],[209,17,251,56,"transceiver"],[209,28,251,67],[209,29,251,68,"receiver"],[209,37,251,76],[210,14,251,78,"track"],[210,19,251,83],[210,21,251,85,"remoteTrack"],[211,12,251,97],[211,13,251,98],[211,14,251,99],[212,12,252,12],[212,16,252,18,"newTransceiver"],[212,30,252,32],[212,33,252,35],[212,37,252,39,"RTCRtpTransceiver"],[212,63,252,56],[212,64,252,57],[213,14,253,16],[213,17,253,19,"transceiver"],[213,28,253,30],[214,14,254,16,"sender"],[214,20,254,22],[214,22,254,24,"newSender"],[214,31,254,33],[215,14,255,16,"receiver"],[215,22,255,24],[215,24,255,26,"newReceiver"],[216,12,256,12],[216,13,256,13],[216,14,256,14],[217,12,258,12],[217,16,258,16],[217,17,258,17,"_insertTransceiverSorted"],[217,41,258,41],[217,42,258,42,"transceiverOrder"],[217,58,258,58],[217,60,258,60,"newTransceiver"],[217,74,258,74],[217,75,258,75],[218,10,259,8],[218,11,259,9],[218,12,259,10],[219,10,261,8],[219,14,261,12],[219,15,261,13,"_updateTransceivers"],[219,34,261,32],[219,35,261,33,"transceiversInfo"],[219,51,261,49],[219,53,261,51],[219,72,261,71,"desc"],[219,76,261,75],[219,77,261,76,"type"],[219,81,261,80],[219,86,261,85],[219,94,261,93],[219,95,261,94],[221,10,263,8],[222,10,264,8],[222,14,264,14,"pendingTrackEvents"],[222,32,264,32],[222,35,264,35],[222,39,264,39],[222,40,264,40,"_pendingTrackEvents"],[222,59,264,59],[223,10,266,8],[223,14,266,12],[223,15,266,13,"_pendingTrackEvents"],[223,34,266,32],[223,37,266,35],[223,39,266,37],[224,10,266,38],[224,14,266,38,"_loop"],[224,19,266,38],[224,32,266,38,"_loop"],[224,33,266,38,"ev"],[224,35,266,38],[224,37,268,45],[225,12,269,12],[225,16,269,12,"_this2$getTransceiver"],[225,37,269,12],[225,40,269,36,"_this2"],[225,46,269,40],[225,47,270,17,"getTransceivers"],[225,62,270,32],[225,63,270,33],[225,64,270,34],[225,65,271,17,"filter"],[225,71,271,23],[225,72,271,24,"t"],[225,73,271,25],[225,77,271,29,"t"],[225,78,271,30],[225,79,271,31,"receiver"],[225,87,271,39],[225,88,271,40,"id"],[225,90,271,42],[225,95,271,48,"ev"],[225,97,271,50],[225,98,271,51,"receiver"],[225,106,271,59],[225,107,271,60,"id"],[225,109,271,62],[225,110,271,63],[226,14,271,63,"_this2$getTransceiver2"],[226,36,271,63],[226,43,271,63,"_slicedToArray2"],[226,58,271,63],[226,59,271,63,"default"],[226,66,271,63],[226,68,271,63,"_this2$getTransceiver"],[226,89,271,63],[227,14,269,20,"transceiver"],[227,25,269,31],[227,28,269,31,"_this2$getTransceiver2"],[227,50,269,31],[229,12,273,12],[230,12,274,12],[231,12,275,12],[233,12,277,12],[234,12,278,12],[234,16,278,18,"track"],[234,21,278,41],[234,24,278,44,"transceiver"],[234,35,278,55],[234,36,278,56,"receiver"],[234,44,278,64],[234,45,278,65,"track"],[234,50,278,70],[235,12,280,12,"transceiver"],[235,23,280,23],[235,24,280,24,"_mid"],[235,28,280,28],[235,31,280,31,"ev"],[235,33,280,33],[235,34,280,34,"transceiver"],[235,45,280,45],[235,46,280,46,"mid"],[235,49,280,49],[236,12,281,12,"transceiver"],[236,23,281,23],[236,24,281,24,"_currentDirection"],[236,41,281,41],[236,44,281,44,"ev"],[236,46,281,46],[236,47,281,47,"transceiver"],[236,58,281,58],[236,59,281,59,"currentDirection"],[236,75,281,75],[237,12,282,12,"transceiver"],[237,23,282,23],[237,24,282,24,"_direction"],[237,34,282,34],[237,37,282,37,"ev"],[237,39,282,39],[237,40,282,40,"transceiver"],[237,51,282,51],[237,52,282,52,"direction"],[237,61,282,61],[239,12,284,12],[240,12,285,12],[240,16,285,18,"streams"],[240,23,285,40],[240,26,285,43,"ev"],[240,28,285,45],[240,29,285,46,"streams"],[240,36,285,53],[240,37,285,54,"map"],[240,40,285,57],[240,41,285,58,"streamInfo"],[240,51,285,68],[240,55,285,72],[241,14,286,16],[242,14,287,16],[243,14,288,16],[243,18,288,20],[243,19,288,21,"_this2"],[243,25,288,25],[243,26,288,26,"_remoteStreams"],[243,40,288,40],[243,41,288,41,"has"],[243,44,288,44],[243,45,288,45,"streamInfo"],[243,55,288,55],[243,56,288,56,"streamId"],[243,64,288,64],[243,65,288,65],[243,67,288,67],[244,16,289,20],[244,20,289,26,"stream"],[244,27,289,32],[244,30,289,35],[244,34,289,39,"MediaStream"],[244,54,289,50],[244,55,289,51],[245,18,290,24,"streamId"],[245,26,290,32],[245,28,290,34,"streamInfo"],[245,38,290,44],[245,39,290,45,"streamId"],[245,47,290,53],[246,18,291,24,"streamReactTag"],[246,32,291,38],[246,34,291,40,"streamInfo"],[246,44,291,50],[246,45,291,51,"streamReactTag"],[246,59,291,65],[247,18,292,24,"tracks"],[247,24,292,30],[247,26,292,32],[248,16,293,20],[248,17,293,21],[248,18,293,22],[249,16,295,20,"_this2"],[249,22,295,24],[249,23,295,25,"_remoteStreams"],[249,37,295,39],[249,38,295,40,"set"],[249,41,295,43],[249,42,295,44,"streamInfo"],[249,52,295,54],[249,53,295,55,"streamId"],[249,61,295,63],[249,63,295,65,"stream"],[249,70,295,71],[249,71,295,72],[250,14,296,16],[251,14,298,16],[251,18,298,22,"stream"],[251,24,298,28],[251,27,298,31,"_this2"],[251,33,298,35],[251,34,298,36,"_remoteStreams"],[251,48,298,50],[251,49,298,51,"get"],[251,52,298,54],[251,53,298,55,"streamInfo"],[251,63,298,65],[251,64,298,66,"streamId"],[251,72,298,74],[251,73,298,75],[252,14,300,16],[252,18,300,20],[252,19,300,21,"stream"],[252,25,300,27],[252,27,300,29,"_tracks"],[252,34,300,36],[252,35,300,37,"includes"],[252,43,300,45],[252,44,300,46,"track"],[252,49,300,51],[252,50,300,52],[252,52,300,54],[253,16,301,20,"stream"],[253,22,301,26],[253,24,301,28,"_tracks"],[253,31,301,35],[253,32,301,36,"push"],[253,36,301,40],[253,37,301,41,"track"],[253,42,301,46],[253,43,301,47],[254,14,302,16],[255,14,304,16],[255,21,304,23,"stream"],[255,27,304,29],[256,12,305,12],[256,13,305,13],[256,14,305,14],[257,12,307,12],[257,16,307,18,"eventData"],[257,25,307,27],[257,28,307,30],[258,14,308,16,"streams"],[258,21,308,23],[259,14,309,16,"transceiver"],[259,25,309,27],[260,14,310,16,"track"],[260,19,310,21],[261,14,311,16,"receiver"],[261,22,311,24],[261,24,311,26,"transceiver"],[261,35,311,37],[261,36,311,38,"receiver"],[262,12,312,12],[262,13,312,13],[263,12,315,12,"_this2"],[263,18,315,16],[263,19,315,17,"dispatchEvent"],[263,32,315,30],[263,33,315,31],[263,37,315,35,"RTCTrackEvent"],[263,59,315,48],[263,60,315,49],[263,67,315,56],[263,69,315,58,"eventData"],[263,78,315,67],[263,79,315,68],[263,80,315,69],[264,12,317,12,"streams"],[264,19,317,19],[264,20,317,20,"forEach"],[264,27,317,27],[264,28,317,28,"stream"],[264,34,317,34],[264,38,317,38],[265,14,318,16,"stream"],[265,20,318,22],[265,21,318,23,"dispatchEvent"],[265,34,318,36],[265,35,318,37],[265,39,318,41,"MediaStreamTrackEvent"],[265,69,318,62],[265,70,318,63],[265,80,318,73],[265,82,318,75],[266,16,318,77,"track"],[267,14,318,83],[267,15,318,84],[267,16,318,85],[267,17,318,86],[268,12,319,12],[268,13,319,13],[268,14,319,14],[270,12,321,12],[271,12,322,12,"track"],[271,17,322,17],[271,18,322,18,"_setMutedInternal"],[271,35,322,35],[271,36,322,36],[271,41,322,41],[271,42,322,42],[272,10,323,8],[272,11,323,9],[273,10,268,8],[273,15,268,13],[273,19,268,19,"ev"],[273,21,268,21],[273,25,268,25,"pendingTrackEvents"],[273,43,268,43],[274,12,268,43],[274,19,268,43,"_loop"],[274,24,268,43],[274,25,268,43,"ev"],[274,27,268,43],[275,10,268,43],[276,10,325,8,"log"],[276,13,325,11],[276,14,325,12,"debug"],[276,19,325,17],[276,20,325,18],[276,23,325,21],[276,27,325,25],[276,28,325,26,"_pcId"],[276,33,325,31],[276,59,325,57],[276,60,325,58],[277,8,326,4],[277,9,326,5],[278,8,326,5],[278,17,218,10,"setRemoteDescription"],[278,37,218,30,"setRemoteDescription"],[278,38,218,30,"_x3"],[278,41,218,30],[279,10,218,30],[279,17,218,30,"_setRemoteDescription"],[279,38,218,30],[279,39,218,30,"apply"],[279,44,218,30],[279,51,218,30,"arguments"],[279,60,218,30],[280,8,218,30],[281,8,218,30],[281,15,218,10,"setRemoteDescription"],[281,35,218,30],[282,6,218,30],[283,4,218,30],[284,6,218,30,"key"],[284,9,218,30],[285,6,218,30,"value"],[285,11,218,30],[286,8,218,30],[286,12,218,30,"_addIceCandidate"],[286,28,218,30],[286,35,218,30,"_asyncToGenerator2"],[286,53,218,30],[286,54,218,30,"default"],[286,61,218,30],[286,63,328,4],[286,74,328,26,"candidate"],[286,83,328,35],[286,85,328,52],[287,10,329,8,"log"],[287,13,329,11],[287,14,329,12,"debug"],[287,19,329,17],[287,20,329,18],[287,23,329,21],[287,27,329,25],[287,28,329,26,"_pcId"],[287,33,329,31],[287,51,329,49],[287,52,329,50],[288,10,331,8],[288,14,331,12],[288,15,331,13,"candidate"],[288,24,331,22],[288,28,331,26],[288,29,331,27,"candidate"],[288,38,331,36],[288,39,331,37,"candidate"],[288,48,331,46],[288,50,331,48],[289,12,332,12],[290,12,333,12],[291,10,334,8],[292,10,336,8],[292,14,336,12],[292,15,336,13,"candidate"],[292,24,336,22],[292,25,336,23,"sdpMLineIndex"],[292,38,336,36],[292,43,336,41],[292,47,336,45],[292,51,337,13,"candidate"],[292,60,337,22],[292,61,337,23,"sdpMLineIndex"],[292,74,337,36],[292,79,337,41,"undefined"],[292,88,337,50],[292,94,338,13,"candidate"],[292,103,338,22],[292,104,338,23,"sdpMid"],[292,110,338,29],[292,115,338,34],[292,119,338,38],[292,123,339,13,"candidate"],[292,132,339,22],[292,133,339,23,"sdpMid"],[292,139,339,29],[292,144,339,34,"undefined"],[292,153,339,43],[292,154,339,44],[292,156,340,10],[293,12,341,12],[293,18,341,18],[293,22,341,22,"TypeError"],[293,31,341,31],[293,32,341,32],[293,97,341,97],[293,98,341,98],[294,10,342,8],[295,10,344,8],[295,14,344,14,"newSdp"],[295,20,344,20],[295,29,344,29,"WebRTCModule"],[295,41,344,41],[295,42,344,42,"peerConnectionAddICECandidate"],[295,71,344,71],[295,72,345,12],[295,76,345,16],[295,77,345,17,"_pcId"],[295,82,345,22],[295,84,346,12,"RTCUtil"],[295,91,346,19],[295,92,346,20,"deepClone"],[295,101,346,29],[295,102,346,30,"candidate"],[295,111,346,39],[295,112,347,8],[295,113,347,9],[296,10,349,8],[296,14,349,12],[296,15,349,13,"remoteDescription"],[296,32,349,30],[296,35,349,33],[296,39,349,37,"RTCSessionDescription"],[296,69,349,58],[296,70,349,59,"newSdp"],[296,76,349,65],[296,77,349,66],[297,8,350,4],[297,9,350,5],[298,8,350,5],[298,17,328,10,"addIceCandidate"],[298,32,328,25,"addIceCandidate"],[298,33,328,25,"_x4"],[298,36,328,25],[299,10,328,25],[299,17,328,25,"_addIceCandidate"],[299,33,328,25],[299,34,328,25,"apply"],[299,39,328,25],[299,46,328,25,"arguments"],[299,55,328,25],[300,8,328,25],[301,8,328,25],[301,15,328,10,"addIceCandidate"],[301,30,328,25],[302,6,328,25],[303,6,352,4],[304,0,353,0],[305,0,354,0],[306,0,355,0],[307,0,356,0],[308,0,357,0],[309,0,358,0],[310,0,359,0],[311,4,352,4],[312,6,352,4,"key"],[312,9,352,4],[313,6,352,4,"value"],[313,11,352,4],[313,13,360,4],[313,22,360,4,"addTrack"],[313,30,360,12,"addTrack"],[313,31,360,13,"track"],[313,36,360,36],[313,38,360,79],[314,8,361,8,"log"],[314,11,361,11],[314,12,361,12,"debug"],[314,17,361,17],[314,18,361,18],[314,21,361,21],[314,25,361,25],[314,26,361,26,"_pcId"],[314,31,361,31],[314,42,361,42],[314,43,361,43],[315,8,363,8],[315,12,363,12],[315,16,363,16],[315,17,363,17,"connectionState"],[315,32,363,32],[315,37,363,37],[315,45,363,45],[315,47,363,47],[316,10,364,12],[316,16,364,18],[316,20,364,22,"Error"],[316,25,364,27],[316,26,364,28],[316,53,364,55],[316,54,364,56],[317,8,365,8],[318,8,367,8],[318,12,367,12],[318,16,367,16],[318,17,367,17,"_trackExists"],[318,29,367,29],[318,30,367,30,"track"],[318,35,367,35],[318,36,367,36],[318,38,367,38],[319,10,368,12],[319,16,368,18],[319,20,368,22,"Error"],[319,25,368,27],[319,26,368,28],[319,60,368,62],[319,61,368,63],[320,8,369,8],[321,8,369,9],[321,17,369,9,"_len"],[321,21,369,9],[321,24,369,9,"arguments"],[321,33,369,9],[321,34,369,9,"length"],[321,40,369,9],[321,42,360,41,"streams"],[321,49,360,48],[321,56,360,48,"Array"],[321,61,360,48],[321,62,360,48,"_len"],[321,66,360,48],[321,73,360,48,"_len"],[321,77,360,48],[321,88,360,48,"_key"],[321,92,360,48],[321,98,360,48,"_key"],[321,102,360,48],[321,105,360,48,"_len"],[321,109,360,48],[321,111,360,48,"_key"],[321,115,360,48],[322,10,360,41,"streams"],[322,17,360,48],[322,18,360,48,"_key"],[322,22,360,48],[322,30,360,48,"arguments"],[322,39,360,48],[322,40,360,48,"_key"],[322,44,360,48],[323,8,360,48],[324,8,371,8],[324,12,371,14,"streamIds"],[324,21,371,23],[324,24,371,26,"streams"],[324,31,371,33],[324,32,371,34,"map"],[324,35,371,37],[324,36,371,38,"s"],[324,37,371,39],[324,41,371,43,"s"],[324,42,371,44],[324,43,371,45,"id"],[324,45,371,47],[324,46,371,48],[325,8,372,8],[325,12,372,14,"result"],[325,18,372,20],[325,21,372,23,"WebRTCModule"],[325,33,372,35],[325,34,372,36,"peerConnectionAddTrack"],[325,56,372,58],[325,57,372,59],[325,61,372,63],[325,62,372,64,"_pcId"],[325,67,372,69],[325,69,372,71,"track"],[325,74,372,76],[325,75,372,77,"id"],[325,77,372,79],[325,79,372,81],[326,10,372,83,"streamIds"],[327,8,372,93],[327,9,372,94],[327,10,372,95],[328,8,374,8],[328,12,374,12,"result"],[328,18,374,18],[328,23,374,23],[328,27,374,27],[328,29,374,29],[329,10,375,12],[329,16,375,18],[329,20,375,22,"Error"],[329,25,375,27],[329,26,375,28],[329,48,375,50],[329,49,375,51],[330,8,376,8],[331,8,378,8],[331,12,378,16,"transceiverOrder"],[331,28,378,32],[331,31,378,58,"result"],[331,37,378,64],[331,38,378,16,"transceiverOrder"],[331,54,378,32],[332,10,378,34,"transceiver"],[332,21,378,45],[332,24,378,58,"result"],[332,30,378,64],[332,31,378,34,"transceiver"],[332,42,378,45],[333,10,378,47,"sender"],[333,16,378,53],[333,19,378,58,"result"],[333,25,378,64],[333,26,378,47,"sender"],[333,32,378,53],[335,8,380,8],[336,8,381,8],[337,8,382,8],[337,12,382,8,"_this$getSenders$filt"],[337,33,382,8],[337,36,382,35],[337,40,382,39],[337,41,383,13,"getSenders"],[337,51,383,23],[337,52,383,24],[337,53,383,25],[337,54,384,13,"filter"],[337,60,384,19],[337,61,384,20,"s"],[337,62,384,21],[337,66,384,25,"s"],[337,67,384,26],[337,68,384,27,"id"],[337,70,384,29],[337,75,384,34,"sender"],[337,81,384,40],[337,82,384,41,"id"],[337,84,384,43],[337,85,384,44],[338,10,384,44,"_this$getSenders$filt2"],[338,32,384,44],[338,39,384,44,"_slicedToArray2"],[338,54,384,44],[338,55,384,44,"default"],[338,62,384,44],[338,64,384,44,"_this$getSenders$filt"],[338,85,384,44],[339,10,382,16,"existingSender"],[339,24,382,30],[339,27,382,30,"_this$getSenders$filt2"],[339,49,382,30],[340,8,386,8],[340,12,386,12,"existingSender"],[340,26,386,26],[340,28,386,28],[341,10,387,12],[342,10,388,12,"existingSender"],[342,24,388,26],[342,25,388,27,"_track"],[342,31,388,33],[342,34,388,36,"track"],[342,39,388,41],[344,10,390,12],[345,10,391,12],[345,14,391,12,"_this$getTransceivers"],[345,35,391,12],[345,38,391,44],[345,42,391,48],[345,43,392,17,"getTransceivers"],[345,58,392,32],[345,59,392,33],[345,60,392,34],[345,61,393,17,"filter"],[345,67,393,23],[345,68,393,24,"t"],[345,69,393,25],[345,73,393,29,"t"],[345,74,393,30],[345,75,393,31,"sender"],[345,81,393,37],[345,82,393,38,"id"],[345,84,393,40],[345,89,393,45,"existingSender"],[345,103,393,59],[345,104,393,60,"id"],[345,106,393,62],[345,107,393,63],[346,12,393,63,"_this$getTransceivers2"],[346,34,393,63],[346,41,393,63,"_slicedToArray2"],[346,56,393,63],[346,57,393,63,"default"],[346,64,393,63],[346,66,393,63,"_this$getTransceivers"],[346,87,393,63],[347,12,391,20,"existingTransceiver"],[347,31,391,39],[347,34,391,39,"_this$getTransceivers2"],[347,56,391,39],[348,10,395,12,"existingTransceiver"],[348,29,395,31],[348,30,395,32,"_direction"],[348,40,395,42],[348,43,395,45,"transceiver"],[348,54,395,56],[348,55,395,57,"direction"],[348,64,395,66],[349,10,396,12,"existingTransceiver"],[349,29,396,31],[349,30,396,32,"_currentDirection"],[349,47,396,49],[349,50,396,52,"transceiver"],[349,61,396,63],[349,62,396,64,"currentDirection"],[349,78,396,80],[350,10,398,12],[350,17,398,19,"existingSender"],[350,31,398,33],[351,8,399,8],[353,8,401,8],[354,8,402,8],[354,12,402,14,"newSender"],[354,21,402,23],[354,24,402,26],[354,28,402,30,"RTCRtpSender"],[354,49,402,42],[354,50,402,43],[355,10,402,45],[355,13,402,48,"transceiver"],[355,24,402,59],[355,25,402,60,"sender"],[355,31,402,66],[356,10,402,68,"track"],[357,8,402,74],[357,9,402,75],[357,10,402,76],[358,8,403,8],[358,12,403,14,"remoteTrack"],[358,23,403,25],[358,26,403,28,"transceiver"],[358,37,403,39],[358,38,403,40,"receiver"],[358,46,403,48],[358,47,403,49,"track"],[358,52,403,54],[358,55,403,57],[358,59,403,61,"MediaStreamTrack"],[358,84,403,77],[358,85,403,78,"transceiver"],[358,96,403,89],[358,97,403,90,"receiver"],[358,105,403,98],[358,106,403,99,"track"],[358,111,403,104],[358,112,403,105],[358,115,403,108],[358,119,403,112],[359,8,404,8],[359,12,404,14,"newReceiver"],[359,23,404,25],[359,26,404,28],[359,30,404,32,"RTCRtpReceiver"],[359,53,404,46],[359,54,404,47],[360,10,404,49],[360,13,404,52,"transceiver"],[360,24,404,63],[360,25,404,64,"receiver"],[360,33,404,72],[361,10,404,74,"track"],[361,15,404,79],[361,17,404,81,"remoteTrack"],[362,8,404,93],[362,9,404,94],[362,10,404,95],[363,8,405,8],[363,12,405,14,"newTransceiver"],[363,26,405,28],[363,29,405,31],[363,33,405,35,"RTCRtpTransceiver"],[363,59,405,52],[363,60,405,53],[364,10,406,12],[364,13,406,15,"transceiver"],[364,24,406,26],[365,10,407,12,"sender"],[365,16,407,18],[365,18,407,20,"newSender"],[365,27,407,29],[366,10,408,12,"receiver"],[366,18,408,20],[366,20,408,22,"newReceiver"],[367,8,409,8],[367,9,409,9],[367,10,409,10],[368,8,411,8],[368,12,411,12],[368,13,411,13,"_insertTransceiverSorted"],[368,37,411,37],[368,38,411,38,"transceiverOrder"],[368,54,411,54],[368,56,411,56,"newTransceiver"],[368,70,411,70],[368,71,411,71],[369,8,413,8],[369,15,413,15,"newSender"],[369,24,413,24],[370,6,414,4],[371,4,414,5],[372,6,414,5,"key"],[372,9,414,5],[373,6,414,5,"value"],[373,11,414,5],[373,13,416,4],[373,22,416,4,"addTransceiver"],[373,36,416,18,"addTransceiver"],[373,37,416,19,"source"],[373,43,416,63],[373,45,416,65,"init"],[373,49,416,69],[373,51,416,90],[374,8,417,8,"log"],[374,11,417,11],[374,12,417,12,"debug"],[374,17,417,17],[374,18,417,18],[374,21,417,21],[374,25,417,25],[374,26,417,26,"_pcId"],[374,31,417,31],[374,48,417,48],[374,49,417,49],[375,8,419,8],[375,12,419,12,"src"],[375,15,419,15],[375,18,419,18],[375,19,419,19],[375,20,419,20],[376,8,421,8],[376,12,421,12,"source"],[376,18,421,18],[376,23,421,23],[376,30,421,30],[376,32,421,32],[377,10,422,12,"src"],[377,13,422,15],[377,16,422,18],[378,12,422,20,"type"],[378,16,422,24],[378,18,422,26],[379,10,422,34],[379,11,422,35],[380,8,423,8],[380,9,423,9],[380,15,423,15],[380,19,423,19,"source"],[380,25,423,25],[380,30,423,30],[380,37,423,37],[380,39,423,39],[381,10,424,12,"src"],[381,13,424,15],[381,16,424,18],[382,12,424,20,"type"],[382,16,424,24],[382,18,424,26],[383,10,424,34],[383,11,424,35],[384,8,425,8],[384,9,425,9],[384,15,425,15],[385,10,426,12,"src"],[385,13,426,15],[385,16,426,18],[386,12,426,20,"trackId"],[386,19,426,27],[386,21,426,29,"source"],[386,27,426,35],[386,28,426,36,"id"],[387,10,426,39],[387,11,426,40],[388,8,427,8],[390,8,429,8],[391,8,430,8],[391,12,430,12,"init"],[391,16,430,16],[391,20,430,20,"init"],[391,24,430,24],[391,25,430,25,"streams"],[391,32,430,32],[391,34,430,34],[392,10,431,12,"init"],[392,14,431,16],[392,15,431,17,"streamIds"],[392,24,431,26],[392,27,431,29,"init"],[392,31,431,33],[392,32,431,34,"streams"],[392,39,431,41],[392,40,431,42,"map"],[392,43,431,45],[392,44,431,46,"stream"],[392,50,431,52],[392,54,431,56,"stream"],[392,60,431,62],[392,61,431,63,"id"],[392,63,431,65],[392,64,431,66],[393,8,432,8],[394,8,434,8],[394,12,434,14,"result"],[394,18,434,20],[394,21,434,23,"WebRTCModule"],[394,33,434,35],[394,34,434,36,"peerConnectionAddTransceiver"],[394,62,434,64],[394,63,434,65],[394,67,434,69],[394,68,434,70,"_pcId"],[394,73,434,75],[394,75,434,77],[395,10,434,79],[395,13,434,82,"src"],[395,16,434,85],[396,10,434,87,"init"],[396,14,434,91],[396,16,434,93],[397,12,434,95],[397,15,434,98,"init"],[398,10,434,103],[399,8,434,105],[399,9,434,106],[399,10,434,107],[400,8,436,8],[400,12,436,12,"result"],[400,18,436,18],[400,23,436,23],[400,27,436,27],[400,29,436,29],[401,10,437,12],[401,16,437,18],[401,20,437,22,"Error"],[401,25,437,27],[401,26,437,28],[401,58,437,60],[401,59,437,61],[402,8,438,8],[403,8,440,8],[403,12,440,14,"t"],[403,13,440,15],[403,16,440,18,"result"],[403,22,440,24],[403,23,440,25,"transceiver"],[403,34,440,36],[404,8,441,8],[404,12,441,12,"track"],[404,17,441,42],[404,20,441,45],[404,24,441,49],[405,8,443,8],[405,12,443,12],[405,19,443,19,"source"],[405,25,443,25],[405,30,443,30],[405,38,443,38],[405,40,443,40],[406,10,444,12],[406,14,444,16,"t"],[406,15,444,17],[406,16,444,18,"sender"],[406,22,444,24],[406,23,444,25,"track"],[406,28,444,30],[406,30,444,32],[407,12,445,16,"track"],[407,17,445,21],[407,20,445,24],[407,24,445,28,"MediaStreamTrack"],[407,49,445,44],[407,50,445,45,"t"],[407,51,445,46],[407,52,445,47,"sender"],[407,58,445,53],[407,59,445,54,"track"],[407,64,445,59],[407,65,445,60],[408,10,446,12],[409,8,447,8],[409,9,447,9],[409,15,447,15],[410,10,448,12],[411,10,449,12,"track"],[411,15,449,17],[411,18,449,20,"source"],[411,24,449,26],[412,8,450,8],[413,8,452,8],[413,12,452,14,"sender"],[413,18,452,20],[413,21,452,23],[413,25,452,27,"RTCRtpSender"],[413,46,452,39],[413,47,452,40],[414,10,452,42],[414,13,452,45,"t"],[414,14,452,46],[414,15,452,47,"sender"],[414,21,452,53],[415,10,452,55,"track"],[416,8,452,61],[416,9,452,62],[416,10,452,63],[417,8,453,8],[417,12,453,14,"remoteTrack"],[417,23,453,25],[417,26,453,28,"t"],[417,27,453,29],[417,28,453,30,"receiver"],[417,36,453,38],[417,37,453,39,"track"],[417,42,453,44],[417,45,453,47],[417,49,453,51,"MediaStreamTrack"],[417,74,453,67],[417,75,453,68,"t"],[417,76,453,69],[417,77,453,70,"receiver"],[417,85,453,78],[417,86,453,79,"track"],[417,91,453,84],[417,92,453,85],[417,95,453,88],[417,99,453,92],[418,8,454,8],[418,12,454,14,"receiver"],[418,20,454,22],[418,23,454,25],[418,27,454,29,"RTCRtpReceiver"],[418,50,454,43],[418,51,454,44],[419,10,454,46],[419,13,454,49,"t"],[419,14,454,50],[419,15,454,51,"receiver"],[419,23,454,59],[420,10,454,61,"track"],[420,15,454,66],[420,17,454,68,"remoteTrack"],[421,8,454,80],[421,9,454,81],[421,10,454,82],[422,8,455,8],[422,12,455,14,"transceiver"],[422,23,455,25],[422,26,455,28],[422,30,455,32,"RTCRtpTransceiver"],[422,56,455,49],[422,57,455,50],[423,10,456,12],[423,13,456,15,"result"],[423,19,456,21],[423,20,456,22,"transceiver"],[423,31,456,33],[424,10,457,12,"sender"],[424,16,457,18],[425,10,458,12,"receiver"],[426,8,459,8],[426,9,459,9],[426,10,459,10],[427,8,461,8],[427,12,461,12],[427,13,461,13,"_insertTransceiverSorted"],[427,37,461,37],[427,38,461,38,"result"],[427,44,461,44],[427,45,461,45,"transceiverOrder"],[427,61,461,61],[427,63,461,63,"transceiver"],[427,74,461,74],[427,75,461,75],[428,8,463,8],[428,15,463,15,"transceiver"],[428,26,463,26],[429,6,464,4],[430,4,464,5],[431,6,464,5,"key"],[431,9,464,5],[432,6,464,5,"value"],[432,11,464,5],[432,13,466,4],[432,22,466,4,"removeTrack"],[432,33,466,15,"removeTrack"],[432,34,466,16,"sender"],[432,40,466,36],[432,42,466,38],[433,8,467,8,"log"],[433,11,467,11],[433,12,467,12,"debug"],[433,17,467,17],[433,18,467,18],[433,21,467,21],[433,25,467,25],[433,26,467,26,"_pcId"],[433,31,467,31],[433,45,467,45],[433,46,467,46],[434,8,469,8],[434,12,469,12],[434,16,469,16],[434,17,469,17,"_pcId"],[434,22,469,22],[434,27,469,27,"sender"],[434,33,469,33],[434,34,469,34,"_peerConnectionId"],[434,51,469,51],[434,53,469,53],[435,10,470,12],[435,16,470,18],[435,20,470,22,"Error"],[435,25,470,27],[435,26,470,28],[435,74,470,76],[435,75,470,77],[436,8,471,8],[437,8,473,8],[437,12,473,12],[437,16,473,16],[437,17,473,17,"connectionState"],[437,32,473,32],[437,37,473,37],[437,45,473,45],[437,47,473,47],[438,10,474,12],[438,16,474,18],[438,20,474,22,"Error"],[438,25,474,27],[438,26,474,28],[438,53,474,55],[438,54,474,56],[439,8,475,8],[440,8,477,8],[440,12,477,14,"existingSender"],[440,26,477,28],[440,29,477,31],[440,33,477,35],[440,34,478,13,"getSenders"],[440,44,478,23],[440,45,478,24],[440,46,478,25],[440,47,479,13,"find"],[440,51,479,17],[440,52,479,18,"s"],[440,53,479,19],[440,57,479,23,"s"],[440,58,479,24],[440,63,479,29,"sender"],[440,69,479,35],[440,70,479,36],[441,8,481,8],[441,12,481,12],[441,13,481,13,"existingSender"],[441,27,481,27],[441,29,481,29],[442,10,482,12],[442,16,482,18],[442,20,482,22,"Error"],[442,25,482,27],[442,26,482,28],[442,49,482,51],[442,50,482,52],[443,8,483,8],[444,8,485,8],[444,12,485,12,"existingSender"],[444,26,485,26],[444,27,485,27,"track"],[444,32,485,32],[444,37,485,37],[444,41,485,41],[444,43,485,43],[445,10,486,12],[446,8,487,8],[448,8,489,8],[449,8,490,8,"WebRTCModule"],[449,20,490,20],[449,21,490,21,"peerConnectionRemoveTrack"],[449,46,490,46],[449,47,490,47],[449,51,490,51],[449,52,490,52,"_pcId"],[449,57,490,57],[449,59,490,59,"sender"],[449,65,490,65],[449,66,490,66,"id"],[449,68,490,68],[449,69,490,69],[450,8,492,8,"existingSender"],[450,22,492,22],[450,23,492,23,"_track"],[450,29,492,29],[450,32,492,32],[450,36,492,36],[451,8,494,8],[451,12,494,8,"_this$getTransceivers3"],[451,34,494,8],[451,37,494,40],[451,41,494,44],[451,42,495,13,"getTransceivers"],[451,57,495,28],[451,58,495,29],[451,59,495,30],[451,60,496,13,"filter"],[451,66,496,19],[451,67,496,20,"t"],[451,68,496,21],[451,72,496,25,"t"],[451,73,496,26],[451,74,496,27,"sender"],[451,80,496,33],[451,81,496,34,"id"],[451,83,496,36],[451,88,496,41,"existingSender"],[451,102,496,55],[451,103,496,56,"id"],[451,105,496,58],[451,106,496,59],[452,10,496,59,"_this$getTransceivers4"],[452,32,496,59],[452,39,496,59,"_slicedToArray2"],[452,54,496,59],[452,55,496,59,"default"],[452,62,496,59],[452,64,496,59,"_this$getTransceivers3"],[452,86,496,59],[453,10,494,16,"existingTransceiver"],[453,29,494,35],[453,32,494,35,"_this$getTransceivers4"],[453,54,494,35],[454,8,498,8,"existingTransceiver"],[454,27,498,27],[454,28,498,28,"_direction"],[454,38,498,38],[454,41,498,41,"existingTransceiver"],[454,60,498,60],[454,61,498,61,"direction"],[454,70,498,70],[454,75,498,75],[454,85,498,85],[454,88,498,88],[454,98,498,98],[454,101,498,101],[454,111,498,111],[455,6,499,4],[456,4,499,5],[457,6,499,5,"key"],[457,9,499,5],[458,6,499,5,"value"],[458,11,499,5],[459,8,499,5],[459,12,499,5,"_getStats"],[459,21,499,5],[459,28,499,5,"_asyncToGenerator2"],[459,46,499,5],[459,47,499,5,"default"],[459,54,499,5],[459,56,501,4],[459,67,501,19,"selector"],[459,75,501,46],[459,77,501,48],[460,10,502,8,"log"],[460,13,502,11],[460,14,502,12,"debug"],[460,19,502,17],[460,20,502,18],[460,23,502,21],[460,27,502,25],[460,28,502,26,"_pcId"],[460,33,502,31],[460,44,502,42],[460,45,502,43],[461,10,504,8],[461,14,504,12],[461,15,504,13,"selector"],[461,23,504,21],[461,25,504,23],[462,12,505,12],[462,16,505,18,"data"],[462,20,505,22],[462,29,505,31,"WebRTCModule"],[462,41,505,43],[462,42,505,44,"peerConnectionGetStats"],[462,64,505,66],[462,65,505,67],[462,69,505,71],[462,70,505,72,"_pcId"],[462,75,505,77],[462,76,505,78],[464,12,507,12],[465,0,508,0],[466,0,509,0],[467,0,510,0],[468,0,511,0],[469,0,512,0],[470,0,513,0],[471,0,514,0],[472,0,515,0],[473,12,516,12],[473,19,516,19],[473,23,516,23,"Map"],[473,26,516,26],[473,27,516,27,"JSON"],[473,31,516,31],[473,32,516,32,"parse"],[473,37,516,37],[473,38,516,38,"data"],[473,42,516,42],[473,43,516,43],[473,44,516,44],[474,10,517,8],[474,11,517,9],[474,17,517,15],[475,12,518,12],[475,16,518,18,"senders"],[475,23,518,25],[475,26,518,28],[475,30,518,32],[475,31,518,33,"getSenders"],[475,41,518,43],[475,42,518,44],[475,43,518,45],[475,44,518,46,"filter"],[475,50,518,52],[475,51,518,53,"s"],[475,52,518,54],[475,56,518,58,"s"],[475,57,518,59],[475,58,518,60,"track"],[475,63,518,65],[475,68,518,70,"selector"],[475,76,518,78],[475,77,518,79],[476,12,519,12],[476,16,519,18,"receivers"],[476,25,519,27],[476,28,519,30],[476,32,519,34],[476,33,519,35,"getReceivers"],[476,45,519,47],[476,46,519,48],[476,47,519,49],[476,48,519,50,"filter"],[476,54,519,56],[476,55,519,57,"r"],[476,56,519,58],[476,60,519,62,"r"],[476,61,519,63],[476,62,519,64,"track"],[476,67,519,69],[476,72,519,74,"selector"],[476,80,519,82],[476,81,519,83],[477,12,520,12],[477,16,520,18,"matches"],[477,23,520,25],[477,26,520,28,"senders"],[477,33,520,35],[477,34,520,36,"length"],[477,40,520,42],[477,43,520,45,"receivers"],[477,52,520,54],[477,53,520,55,"length"],[477,59,520,61],[478,12,522,12],[478,16,522,16,"matches"],[478,23,522,23],[478,28,522,28],[478,29,522,29],[478,31,522,31],[479,14,523,16],[479,20,523,22],[479,24,523,26,"Error"],[479,29,523,31],[479,30,523,32],[479,91,523,93],[479,92,523,94],[480,12,524,12],[480,13,524,13],[480,19,524,19],[480,23,524,23,"matches"],[480,30,524,30],[480,33,524,33],[480,34,524,34],[480,36,524,36],[481,14,525,16],[481,20,525,22],[481,24,525,26,"Error"],[481,29,525,31],[481,30,525,32],[481,87,525,89],[481,88,525,90],[482,12,526,12],[482,13,526,13],[482,19,526,19],[483,14,527,16],[483,18,527,22,"sr"],[483,20,527,24],[483,23,527,27,"senders"],[483,30,527,34],[483,31,527,35],[483,32,527,36],[483,33,527,37],[483,37,527,41,"receivers"],[483,46,527,50],[483,47,527,51],[483,48,527,52],[483,49,527,53],[484,14,529,16],[484,21,529,23,"sr"],[484,23,529,25],[484,24,529,26,"getStats"],[484,32,529,34],[484,33,529,35],[484,34,529,36],[485,12,530,12],[486,10,531,8],[487,8,532,4],[487,9,532,5],[488,8,532,5],[488,17,501,10,"getStats"],[488,25,501,18,"getStats"],[488,26,501,18,"_x5"],[488,29,501,18],[489,10,501,18],[489,17,501,18,"_getStats"],[489,26,501,18],[489,27,501,18,"apply"],[489,32,501,18],[489,39,501,18,"arguments"],[489,48,501,18],[490,8,501,18],[491,8,501,18],[491,15,501,10,"getStats"],[491,23,501,18],[492,6,501,18],[493,4,501,18],[494,6,501,18,"key"],[494,9,501,18],[495,6,501,18,"value"],[495,11,501,18],[495,13,534,4],[495,22,534,4,"getTransceivers"],[495,37,534,19,"getTransceivers"],[495,38,534,19],[495,40,534,43],[496,8,535,8],[496,15,535,15],[496,19,535,19],[496,20,535,20,"_transceivers"],[496,33,535,33],[496,34,535,34,"map"],[496,37,535,37],[496,38,535,38,"e"],[496,39,535,39],[496,43,535,43,"e"],[496,44,535,44],[496,45,535,45,"transceiver"],[496,56,535,56],[496,57,535,57],[497,6,536,4],[498,4,536,5],[499,6,536,5,"key"],[499,9,536,5],[500,6,536,5,"value"],[500,11,536,5],[500,13,538,4],[500,22,538,4,"getSenders"],[500,32,538,14,"getSenders"],[500,33,538,14],[500,35,538,33],[501,8,539,8],[501,15,539,15],[501,19,539,19],[501,20,539,20,"_transceivers"],[501,33,539,33],[501,34,539,34,"filter"],[501,40,539,40],[501,41,539,41,"e"],[501,42,539,42],[501,46,539,46],[501,47,539,47,"e"],[501,48,539,48],[501,49,539,49,"transceiver"],[501,60,539,60],[501,61,539,61,"stopped"],[501,68,539,68],[501,69,539,69],[501,70,539,70,"map"],[501,73,539,73],[501,74,539,74,"e"],[501,75,539,75],[501,79,539,79,"e"],[501,80,539,80],[501,81,539,81,"transceiver"],[501,92,539,92],[501,93,539,93,"sender"],[501,99,539,99],[501,100,539,100],[502,6,540,4],[503,4,540,5],[504,6,540,5,"key"],[504,9,540,5],[505,6,540,5,"value"],[505,11,540,5],[505,13,542,4],[505,22,542,4,"getReceivers"],[505,34,542,16,"getReceivers"],[505,35,542,16],[505,37,542,37],[506,8,543,8],[506,15,543,15],[506,19,543,19],[506,20,543,20,"_transceivers"],[506,33,543,33],[506,34,543,34,"filter"],[506,40,543,40],[506,41,543,41,"e"],[506,42,543,42],[506,46,543,46],[506,47,543,47,"e"],[506,48,543,48],[506,49,543,49,"transceiver"],[506,60,543,60],[506,61,543,61,"stopped"],[506,68,543,68],[506,69,543,69],[506,70,543,70,"map"],[506,73,543,73],[506,74,543,74,"e"],[506,75,543,75],[506,79,543,79,"e"],[506,80,543,80],[506,81,543,81,"transceiver"],[506,92,543,92],[506,93,543,93,"receiver"],[506,101,543,101],[506,102,543,102],[507,6,544,4],[508,4,544,5],[509,6,544,5,"key"],[509,9,544,5],[510,6,544,5,"value"],[510,11,544,5],[510,13,546,4],[510,22,546,4,"close"],[510,27,546,9,"close"],[510,28,546,9],[510,30,546,18],[511,8,547,8,"log"],[511,11,547,11],[511,12,547,12,"debug"],[511,17,547,17],[511,18,547,18],[511,21,547,21],[511,25,547,25],[511,26,547,26,"_pcId"],[511,31,547,31],[511,39,547,39],[511,40,547,40],[512,8,549,8],[512,12,549,12],[512,16,549,16],[512,17,549,17,"connectionState"],[512,32,549,32],[512,37,549,37],[512,45,549,45],[512,47,549,47],[513,10,550,12],[514,8,551,8],[515,8,553,8,"WebRTCModule"],[515,20,553,20],[515,21,553,21,"peerConnectionClose"],[515,40,553,40],[515,41,553,41],[515,45,553,45],[515,46,553,46,"_pcId"],[515,51,553,51],[515,52,553,52],[517,8,555,8],[518,8,556,8],[518,12,556,12],[518,13,556,13,"_transceivers"],[518,26,556,26],[518,27,556,27,"forEach"],[518,34,556,34],[518,35,556,35,"_ref"],[518,39,556,35],[518,43,556,55],[519,10,556,55],[519,14,556,38,"transceiver"],[519,25,556,49],[519,28,556,49,"_ref"],[519,32,556,49],[519,33,556,38,"transceiver"],[519,44,556,49],[520,10,557,12,"transceiver"],[520,21,557,23],[520,22,557,24,"_setStopped"],[520,33,557,35],[520,34,557,36],[520,35,557,37],[521,8,558,8],[521,9,558,9],[521,10,558,10],[522,6,559,4],[523,4,559,5],[524,6,559,5,"key"],[524,9,559,5],[525,6,559,5,"value"],[525,11,559,5],[525,13,561,4],[525,22,561,4,"restartIce"],[525,32,561,14,"restartIce"],[525,33,561,14],[525,35,561,23],[526,8,562,8,"WebRTCModule"],[526,20,562,20],[526,21,562,21,"peerConnectionRestartIce"],[526,45,562,45],[526,46,562,46],[526,50,562,50],[526,51,562,51,"_pcId"],[526,56,562,56],[526,57,562,57],[527,6,563,4],[528,4,563,5],[529,6,563,5,"key"],[529,9,563,5],[530,6,563,5,"value"],[530,11,563,5],[530,13,565,4],[530,22,565,4,"_registerEvents"],[530,37,565,19,"_registerEvents"],[530,38,565,19],[530,40,565,28],[531,8,566,8],[531,12,566,8,"addListener"],[531,37,566,19],[531,39,566,20],[531,43,566,24],[531,45,566,26],[531,82,566,63],[531,84,566,66,"ev"],[531,86,566,73],[531,90,566,78],[532,10,567,12],[532,14,567,16,"ev"],[532,16,567,18],[532,17,567,19,"pcId"],[532,21,567,23],[532,26,567,28],[532,30,567,32],[532,31,567,33,"_pcId"],[532,36,567,38],[532,38,567,40],[533,12,568,16],[534,10,569,12],[535,10,571,12],[535,14,571,16],[535,15,571,17,"dispatchEvent"],[535,28,571,30],[535,29,571,31],[535,33,571,35,"Event"],[535,45,571,40],[535,46,571,41],[535,65,571,60],[535,66,571,61],[535,67,571,62],[536,8,572,8],[536,9,572,9],[536,10,572,10],[537,8,574,8],[537,12,574,8,"addListener"],[537,37,574,19],[537,39,574,20],[537,43,574,24],[537,45,574,26],[537,81,574,62],[537,83,574,65,"ev"],[537,85,574,72],[537,89,574,77],[538,10,575,12],[538,14,575,16,"ev"],[538,16,575,18],[538,17,575,19,"pcId"],[538,21,575,23],[538,26,575,28],[538,30,575,32],[538,31,575,33,"_pcId"],[538,36,575,38],[538,38,575,40],[539,12,576,16],[540,10,577,12],[541,10,579,12],[541,14,579,16],[541,15,579,17,"iceConnectionState"],[541,33,579,35],[541,36,579,38,"ev"],[541,38,579,40],[541,39,579,41,"iceConnectionState"],[541,57,579,59],[542,10,581,12],[542,14,581,16],[542,15,581,17,"dispatchEvent"],[542,28,581,30],[542,29,581,31],[542,33,581,35,"Event"],[542,45,581,40],[542,46,581,41],[542,72,581,67],[542,73,581,68],[542,74,581,69],[543,8,582,8],[543,9,582,9],[543,10,582,10],[544,8,584,8],[544,12,584,8,"addListener"],[544,37,584,19],[544,39,584,20],[544,43,584,24],[544,45,584,26],[544,73,584,54],[544,75,584,57,"ev"],[544,77,584,64],[544,81,584,69],[545,10,585,12],[545,14,585,16,"ev"],[545,16,585,18],[545,17,585,19,"pcId"],[545,21,585,23],[545,26,585,28],[545,30,585,32],[545,31,585,33,"_pcId"],[545,36,585,38],[545,38,585,40],[546,12,586,16],[547,10,587,12],[548,10,589,12],[548,14,589,16],[548,15,589,17,"connectionState"],[548,30,589,32],[548,33,589,35,"ev"],[548,35,589,37],[548,36,589,38,"connectionState"],[548,51,589,53],[549,10,591,12],[549,14,591,16],[549,15,591,17,"dispatchEvent"],[549,28,591,30],[549,29,591,31],[549,33,591,35,"Event"],[549,45,591,40],[549,46,591,41],[549,69,591,64],[549,70,591,65],[549,71,591,66],[550,10,593,12],[550,14,593,16,"ev"],[550,16,593,18],[550,17,593,19,"connectionState"],[550,32,593,34],[550,37,593,39],[550,45,593,47],[550,47,593,49],[551,12,594,16],[552,12,595,16],[552,16,595,16,"removeListener"],[552,44,595,30],[552,46,595,31],[552,50,595,35],[552,51,595,36],[553,12,597,16,"WebRTCModule"],[553,24,597,28],[553,25,597,29,"peerConnectionDispose"],[553,46,597,50],[553,47,597,51],[553,51,597,55],[553,52,597,56,"_pcId"],[553,57,597,61],[553,58,597,62],[554,10,598,12],[555,8,599,8],[555,9,599,9],[555,10,599,10],[556,8,601,8],[556,12,601,8,"addListener"],[556,37,601,19],[556,39,601,20],[556,43,601,24],[556,45,601,26],[556,82,601,63],[556,84,601,66,"ev"],[556,86,601,73],[556,90,601,78],[557,10,602,12],[557,14,602,16,"ev"],[557,16,602,18],[557,17,602,19,"pcId"],[557,21,602,23],[557,26,602,28],[557,30,602,32],[557,31,602,33,"_pcId"],[557,36,602,38],[557,38,602,40],[558,12,603,16],[559,10,604,12],[560,10,606,12],[560,14,606,16],[560,15,606,17,"signalingState"],[560,29,606,31],[560,32,606,34,"ev"],[560,34,606,36],[560,35,606,37,"signalingState"],[560,49,606,51],[561,10,608,12],[561,14,608,16],[561,15,608,17,"dispatchEvent"],[561,28,608,30],[561,29,608,31],[561,33,608,35,"Event"],[561,45,608,40],[561,46,608,41],[561,68,608,63],[561,69,608,64],[561,70,608,65],[562,8,609,8],[562,9,609,9],[562,10,609,10],[564,8,611,8],[565,8,612,8],[565,12,612,8,"addListener"],[565,37,612,19],[565,39,612,20],[565,43,612,24],[565,45,612,26],[565,68,612,49],[565,70,612,52,"ev"],[565,72,612,59],[565,76,612,64],[566,10,613,12],[566,14,613,16,"ev"],[566,16,613,18],[566,17,613,19,"pcId"],[566,21,613,23],[566,26,613,28],[566,30,613,32],[566,31,613,33,"_pcId"],[566,36,613,38],[566,38,613,40],[567,12,614,16],[568,10,615,12],[569,10,617,12,"log"],[569,13,617,15],[569,14,617,16,"debug"],[569,19,617,21],[569,20,617,22],[569,23,617,25],[569,27,617,29],[569,28,617,30,"_pcId"],[569,33,617,35],[569,43,617,45],[569,44,617,46],[571,10,619,12],[572,10,620,12],[573,10,621,12],[574,10,622,12],[574,14,622,16],[574,15,622,17,"_pendingTrackEvents"],[574,34,622,36],[574,35,622,37,"push"],[574,39,622,41],[574,40,622,42,"ev"],[574,42,622,44],[574,43,622,45],[575,8,623,8],[575,9,623,9],[575,10,623,10],[576,8,625,8],[576,12,625,8,"addListener"],[576,37,625,19],[576,39,625,20],[576,43,625,24],[576,45,625,26],[576,74,625,55],[576,76,625,58,"ev"],[576,78,625,65],[576,82,625,70],[577,10,626,12],[577,14,626,16,"ev"],[577,16,626,18],[577,17,626,19,"pcId"],[577,21,626,23],[577,26,626,28],[577,30,626,32],[577,31,626,33,"_pcId"],[577,36,626,38],[577,38,626,40],[578,12,627,16],[579,10,628,12],[580,10,630,12,"log"],[580,13,630,15],[580,14,630,16,"debug"],[580,19,630,21],[580,20,630,22],[580,23,630,25],[580,27,630,29],[580,28,630,30,"_pcId"],[580,33,630,35],[580,51,630,53,"ev"],[580,53,630,55],[580,54,630,56,"receiverId"],[580,64,630,66],[580,66,630,68],[580,67,630,69],[581,10,632,12],[581,14,632,18,"receiver"],[581,22,632,26],[581,25,632,29],[581,29,632,33],[581,30,632,34,"getReceivers"],[581,42,632,46],[581,43,632,47],[581,44,632,48],[581,45,632,49,"find"],[581,49,632,53],[581,50,632,54,"r"],[581,51,632,55],[581,55,632,59,"r"],[581,56,632,60],[581,57,632,61,"id"],[581,59,632,63],[581,64,632,68,"ev"],[581,66,632,70],[581,67,632,71,"receiverId"],[581,77,632,81],[581,78,632,82],[582,10,633,12],[582,14,633,18,"track"],[582,19,633,23],[582,22,633,26,"receiver"],[582,30,633,34],[582,32,633,36,"track"],[582,37,633,41],[583,10,635,12],[583,14,635,16,"receiver"],[583,22,635,24],[583,26,635,28,"track"],[583,31,635,33],[583,33,635,35],[584,12,636,16],[585,12,637,16],[586,12,638,16],[587,12,639,16],[588,12,640,16],[589,12,641,16],[589,17,641,21],[589,21,641,27,"stream"],[589,27,641,33],[589,31,641,37],[589,35,641,41],[589,36,641,42,"_remoteStreams"],[589,50,641,56],[589,51,641,57,"values"],[589,57,641,63],[589,58,641,64],[589,59,641,65],[589,61,641,67],[590,14,642,20],[590,18,642,24,"stream"],[590,24,642,30],[590,25,642,31,"_tracks"],[590,32,642,38],[590,33,642,39,"includes"],[590,41,642,47],[590,42,642,48,"track"],[590,47,642,53],[590,48,642,54],[590,50,642,56],[591,16,643,24],[591,20,643,30,"trackIdx"],[591,28,643,38],[591,31,643,41,"stream"],[591,37,643,47],[591,38,643,48,"_tracks"],[591,45,643,55],[591,46,643,56,"indexOf"],[591,53,643,63],[591,54,643,64,"track"],[591,59,643,69],[591,60,643,70],[592,16,645,24,"log"],[592,19,645,27],[592,20,645,28,"debug"],[592,25,645,33],[592,26,645,34],[592,29,645,37],[592,33,645,41],[592,34,645,42,"_pcId"],[592,39,645,47],[592,55,645,63,"track"],[592,60,645,68],[592,61,645,69,"id"],[592,63,645,71],[592,65,645,73],[592,66,645,74],[593,16,647,24,"stream"],[593,22,647,30],[593,23,647,31,"_tracks"],[593,30,647,38],[593,31,647,39,"splice"],[593,37,647,45],[593,38,647,46,"trackIdx"],[593,46,647,54],[593,48,647,56],[593,49,647,57],[593,50,647,58],[594,16,649,24,"stream"],[594,22,649,30],[594,23,649,31,"dispatchEvent"],[594,36,649,44],[594,37,649,45],[594,41,649,49,"MediaStreamTrackEvent"],[594,71,649,70],[594,72,649,71],[594,85,649,84],[594,87,649,86],[595,18,649,88,"track"],[596,16,649,94],[596,17,649,95],[596,18,649,96],[596,19,649,97],[598,16,651,24],[599,16,652,24,"track"],[599,21,652,29],[599,22,652,30,"_setMutedInternal"],[599,39,652,47],[599,40,652,48],[599,44,652,52],[599,45,652,53],[600,14,653,20],[601,12,654,16],[602,10,655,12],[603,8,656,8],[603,9,656,9],[603,10,656,10],[604,8,658,8],[604,12,658,8,"addListener"],[604,37,658,19],[604,39,658,20],[604,43,658,24],[604,45,658,26],[604,76,658,57],[604,78,658,60,"ev"],[604,80,658,67],[604,84,658,72],[605,10,659,12],[605,14,659,16,"ev"],[605,16,659,18],[605,17,659,19,"pcId"],[605,21,659,23],[605,26,659,28],[605,30,659,32],[605,31,659,33,"_pcId"],[605,36,659,38],[605,38,659,40],[606,12,660,16],[607,10,661,12],[608,10,663,12],[608,14,663,18,"sdpInfo"],[608,21,663,25],[608,24,663,28,"ev"],[608,26,663,30],[608,27,663,31,"sdp"],[608,30,663,34],[610,10,665,12],[611,10,666,12],[611,14,666,16,"sdpInfo"],[611,21,666,23],[611,22,666,24,"type"],[611,26,666,28],[611,30,666,32,"sdpInfo"],[611,37,666,39],[611,38,666,40,"sdp"],[611,41,666,43],[611,43,666,45],[612,12,667,16],[612,16,667,20],[612,17,667,21,"localDescription"],[612,33,667,37],[612,36,667,40],[612,40,667,44,"RTCSessionDescription"],[612,70,667,65],[612,71,667,66,"sdpInfo"],[612,78,667,73],[612,79,667,74],[613,10,668,12],[613,11,668,13],[613,17,668,19],[614,12,669,16],[614,16,669,20],[614,17,669,21,"localDescription"],[614,33,669,37],[614,36,669,40],[614,40,669,44],[615,10,670,12],[616,10,672,12],[616,14,672,18,"candidate"],[616,23,672,27],[616,26,672,30],[616,30,672,34,"RTCIceCandidate"],[616,54,672,49],[616,55,672,50,"ev"],[616,57,672,52],[616,58,672,53,"candidate"],[616,67,672,62],[616,68,672,63],[617,10,674,12],[617,14,674,16],[617,15,674,17,"dispatchEvent"],[617,28,674,30],[617,29,674,31],[617,33,674,35,"RTCIceCandidateEvent"],[617,62,674,55],[617,63,674,56],[617,77,674,70],[617,79,674,72],[618,12,674,74,"candidate"],[619,10,674,84],[619,11,674,85],[619,12,674,86],[619,13,674,87],[620,8,675,8],[620,9,675,9],[620,10,675,10],[621,8,677,8],[621,12,677,8,"addListener"],[621,37,677,19],[621,39,677,20],[621,43,677,24],[621,45,677,26],[621,80,677,61],[621,82,677,64,"ev"],[621,84,677,71],[621,88,677,76],[622,10,678,12],[622,14,678,16,"ev"],[622,16,678,18],[622,17,678,19,"pcId"],[622,21,678,23],[622,26,678,28],[622,30,678,32],[622,31,678,33,"_pcId"],[622,36,678,38],[622,38,678,40],[623,12,679,16],[624,10,680,12],[625,10,682,12],[625,14,682,16],[625,15,682,17,"iceGatheringState"],[625,32,682,34],[625,35,682,37,"ev"],[625,37,682,39],[625,38,682,40,"iceGatheringState"],[625,55,682,57],[626,10,684,12],[626,14,684,16],[626,18,684,20],[626,19,684,21,"iceGatheringState"],[626,36,684,38],[626,41,684,43],[626,51,684,53],[626,53,684,55],[627,12,685,16],[627,16,685,22,"sdpInfo"],[627,23,685,29],[627,26,685,32,"ev"],[627,28,685,34],[627,29,685,35,"sdp"],[627,32,685,38],[629,12,687,16],[630,12,688,16],[630,16,688,20,"sdpInfo"],[630,23,688,27],[630,24,688,28,"type"],[630,28,688,32],[630,32,688,36,"sdpInfo"],[630,39,688,43],[630,40,688,44,"sdp"],[630,43,688,47],[630,45,688,49],[631,14,689,20],[631,18,689,24],[631,19,689,25,"localDescription"],[631,35,689,41],[631,38,689,44],[631,42,689,48,"RTCSessionDescription"],[631,72,689,69],[631,73,689,70,"sdpInfo"],[631,80,689,77],[631,81,689,78],[632,12,690,16],[632,13,690,17],[632,19,690,23],[633,14,691,20],[633,18,691,24],[633,19,691,25,"localDescription"],[633,35,691,41],[633,38,691,44],[633,42,691,48],[634,12,692,16],[635,12,694,16],[635,16,694,20],[635,17,694,21,"dispatchEvent"],[635,30,694,34],[635,31,694,35],[635,35,694,39,"RTCIceCandidateEvent"],[635,64,694,59],[635,65,694,60],[635,79,694,74],[635,81,694,76],[636,14,694,78,"candidate"],[636,23,694,87],[636,25,694,89],[637,12,694,94],[637,13,694,95],[637,14,694,96],[637,15,694,97],[638,10,695,12],[639,10,697,12],[639,14,697,16],[639,15,697,17,"dispatchEvent"],[639,28,697,30],[639,29,697,31],[639,33,697,35,"Event"],[639,45,697,40],[639,46,697,41],[639,71,697,66],[639,72,697,67],[639,73,697,68],[640,8,698,8],[640,9,698,9],[640,10,698,10],[641,8,700,8],[641,12,700,8,"addListener"],[641,37,700,19],[641,39,700,20],[641,43,700,24],[641,45,700,26],[641,79,700,60],[641,81,700,63,"ev"],[641,83,700,70],[641,87,700,75],[642,10,701,12],[642,14,701,16,"ev"],[642,16,701,18],[642,17,701,19,"pcId"],[642,21,701,23],[642,26,701,28],[642,30,701,32],[642,31,701,33,"_pcId"],[642,36,701,38],[642,38,701,40],[643,12,702,16],[644,10,703,12],[645,10,705,12],[645,14,705,18,"channel"],[645,21,705,25],[645,24,705,28],[645,28,705,32,"RTCDataChannel"],[645,51,705,46],[645,52,705,47,"ev"],[645,54,705,49],[645,55,705,50,"dataChannel"],[645,66,705,61],[645,67,705,62],[646,10,707,12],[646,14,707,16],[646,15,707,17,"dispatchEvent"],[646,28,707,30],[646,29,707,31],[646,33,707,35,"RTCDataChannelEvent"],[646,61,707,54],[646,62,707,55],[646,75,707,68],[646,77,707,70],[647,12,707,72,"channel"],[648,10,707,80],[648,11,707,81],[648,12,707,82],[648,13,707,83],[650,10,709,12],[651,10,710,12],[652,10,711,12,"channel"],[652,17,711,19],[652,18,711,20,"dispatchEvent"],[652,31,711,33],[652,32,711,34],[652,36,711,38,"RTCDataChannelEvent"],[652,64,711,57],[652,65,711,58],[652,71,711,64],[652,73,711,66],[653,12,711,68,"channel"],[654,10,711,76],[654,11,711,77],[654,12,711,78],[654,13,711,79],[655,8,712,8],[655,9,712,9],[655,10,712,10],[656,8,714,8],[656,12,714,8,"addListener"],[656,37,714,19],[656,39,714,20],[656,43,714,24],[656,45,714,26],[656,74,714,55],[656,76,714,58,"ev"],[656,78,714,65],[656,82,714,70],[657,10,715,12],[657,14,715,16,"ev"],[657,16,715,18],[657,17,715,19,"pcId"],[657,21,715,23],[657,26,715,28],[657,30,715,32],[657,31,715,33,"_pcId"],[657,36,715,38],[657,38,715,40],[658,12,716,16],[659,10,717,12],[660,10,719,12],[660,14,719,12,"_this$getReceivers$ma"],[660,35,719,12],[660,38,721,16],[660,42,721,20],[660,43,721,21,"getReceivers"],[660,55,721,33],[660,56,721,34],[660,57,721,35],[660,58,721,36,"map"],[660,61,721,39],[660,62,721,40,"r"],[660,63,721,41],[660,67,721,45,"r"],[660,68,721,46],[660,69,721,47,"track"],[660,74,721,52],[660,75,721,53],[660,76,721,54,"filter"],[660,82,721,60],[660,83,721,61,"t"],[660,84,721,62],[660,88,721,66,"t"],[660,89,721,67],[660,91,721,69,"id"],[660,93,721,71],[660,98,721,76,"ev"],[660,100,721,78],[660,101,721,79,"trackId"],[660,108,721,86],[660,109,721,87],[661,12,721,87,"_this$getReceivers$ma2"],[661,34,721,87],[661,41,721,87,"_slicedToArray2"],[661,56,721,87],[661,57,721,87,"default"],[661,64,721,87],[661,66,721,87,"_this$getReceivers$ma"],[661,87,721,87],[662,12,720,16,"track"],[662,17,720,21],[662,20,720,21,"_this$getReceivers$ma2"],[662,42,720,21],[663,10,723,12],[663,14,723,16,"track"],[663,19,723,21],[663,21,723,23],[664,12,724,16,"track"],[664,17,724,21],[664,18,724,22,"_setMutedInternal"],[664,35,724,39],[664,36,724,40,"ev"],[664,38,724,42],[664,39,724,43,"muted"],[664,44,724,48],[664,45,724,49],[665,10,725,12],[666,8,726,8],[666,9,726,9],[666,10,726,10],[667,6,727,4],[669,6,729,4],[670,0,730,0],[671,0,731,0],[672,0,732,0],[673,0,733,0],[674,0,734,0],[675,0,735,0],[676,0,736,0],[677,0,737,0],[678,0,738,0],[679,0,739,0],[680,4,729,4],[681,6,729,4,"key"],[681,9,729,4],[682,6,729,4,"value"],[682,11,729,4],[682,13,740,4],[682,22,740,4,"createDataChannel"],[682,39,740,21,"createDataChannel"],[682,40,740,22,"label"],[682,45,740,35],[682,47,740,37,"dataChannelDict"],[682,62,740,73],[682,64,740,91],[683,8,741,8],[683,12,741,12,"arguments"],[683,21,741,21],[683,22,741,22,"length"],[683,28,741,28],[683,33,741,33],[683,34,741,34],[683,36,741,36],[684,10,742,12],[684,16,742,18],[684,20,742,22,"TypeError"],[684,29,742,31],[684,30,742,32],[684,66,742,68],[684,67,742,69],[685,8,743,8],[686,8,745,8],[686,12,745,12,"dataChannelDict"],[686,27,745,27],[686,31,745,31],[686,35,745,35],[686,39,745,39,"dataChannelDict"],[686,54,745,54],[686,56,745,56],[687,10,746,12],[687,14,746,18,"id"],[687,16,746,20],[687,19,746,23,"dataChannelDict"],[687,34,746,38],[687,35,746,39,"id"],[687,37,746,41],[688,10,748,12],[688,14,748,16],[688,21,748,23,"id"],[688,23,748,25],[688,28,748,30],[688,36,748,38],[688,38,748,40],[689,12,749,16],[689,18,749,22],[689,22,749,26,"TypeError"],[689,31,749,35],[689,32,749,36],[689,67,749,71],[689,70,749,74,"id"],[689,72,749,76],[689,73,749,77],[690,10,750,12],[691,8,751,8],[692,8,753,8],[692,12,753,14,"channelInfo"],[692,23,753,25],[692,26,753,28,"WebRTCModule"],[692,38,753,40],[692,39,753,41,"createDataChannel"],[692,56,753,58],[692,57,753,59],[692,61,753,63],[692,62,753,64,"_pcId"],[692,67,753,69],[692,69,753,71,"String"],[692,75,753,77],[692,76,753,78,"label"],[692,81,753,83],[692,82,753,84],[692,84,753,86,"dataChannelDict"],[692,99,753,101],[692,100,753,102],[693,8,755,8],[693,12,755,12,"channelInfo"],[693,23,755,23],[693,28,755,28],[693,32,755,32],[693,34,755,34],[694,10,756,12],[694,16,756,18],[694,20,756,22,"TypeError"],[694,29,756,31],[694,30,756,32],[694,64,756,66],[694,65,756,67],[695,8,757,8],[696,8,759,8],[696,15,759,15],[696,19,759,19,"RTCDataChannel"],[696,42,759,33],[696,43,759,34,"channelInfo"],[696,54,759,45],[696,55,759,46],[697,6,760,4],[699,6,762,4],[700,0,763,0],[701,0,764,0],[702,0,765,0],[703,4,762,4],[704,6,762,4,"key"],[704,9,762,4],[705,6,762,4,"value"],[705,11,762,4],[705,13,766,4],[705,22,766,4,"_trackExists"],[705,34,766,16,"_trackExists"],[705,35,766,17,"track"],[705,40,766,40],[705,42,766,51],[706,8,767,8],[706,12,767,8,"_this$getSenders$filt3"],[706,34,767,8],[706,37,767,27],[706,41,767,31],[706,42,768,13,"getSenders"],[706,52,768,23],[706,53,768,24],[706,54,768,25],[706,55,769,13,"filter"],[706,61,769,19],[706,62,770,16,"sender"],[706,68,770,22],[706,72,770,26,"sender"],[706,78,770,32],[706,79,770,33,"track"],[706,84,770,38],[706,86,770,40,"id"],[706,88,770,42],[706,93,770,47,"track"],[706,98,770,52],[706,99,770,53,"id"],[706,101,771,12],[706,102,771,13],[707,10,771,13,"_this$getSenders$filt4"],[707,32,771,13],[707,39,771,13,"_slicedToArray2"],[707,54,771,13],[707,55,771,13,"default"],[707,62,771,13],[707,64,771,13,"_this$getSenders$filt3"],[707,86,771,13],[708,10,767,16,"sender"],[708,16,767,22],[708,19,767,22,"_this$getSenders$filt4"],[708,41,767,22],[709,8,773,8],[709,15,773,15,"sender"],[709,21,773,21],[709,24,773,23],[709,28,773,27],[709,31,773,30],[709,36,773,35],[710,6,774,4],[712,6,776,4],[713,0,777,0],[714,0,778,0],[715,4,776,4],[716,6,776,4,"key"],[716,9,776,4],[717,6,776,4,"value"],[717,11,776,4],[717,13,779,4],[717,22,779,4,"_updateTransceivers"],[717,41,779,23,"_updateTransceivers"],[717,42,779,24,"transceiverUpdates"],[717,60,779,42],[717,62,779,67],[718,8,779,67],[718,12,779,67,"_this3"],[718,18,779,67],[719,8,779,67],[719,12,779,44,"removeStopped"],[719,25,779,57],[719,28,779,57,"arguments"],[719,37,779,57],[719,38,779,57,"length"],[719,44,779,57],[719,52,779,57,"arguments"],[719,61,779,57],[719,69,779,57,"undefined"],[719,78,779,57],[719,81,779,57,"arguments"],[719,90,779,57],[719,96,779,60],[719,101,779,65],[720,8,779,65],[720,12,779,65,"_loop2"],[720,18,779,65],[720,30,779,65,"_loop2"],[720,31,779,65,"update"],[720,37,779,65],[720,39,780,49],[721,10,781,12],[721,14,781,12,"_this3$getTransceiver"],[721,35,781,12],[721,38,781,36,"_this3"],[721,44,781,40],[721,45,782,17,"getTransceivers"],[721,60,782,32],[721,61,782,33],[721,62,782,34],[721,63,783,17,"filter"],[721,69,783,23],[721,70,783,24,"t"],[721,71,783,25],[721,75,783,29,"t"],[721,76,783,30],[721,77,783,31,"sender"],[721,83,783,37],[721,84,783,38,"id"],[721,86,783,40],[721,91,783,45,"update"],[721,97,783,51],[721,98,783,52,"transceiverId"],[721,111,783,65],[721,112,783,66],[722,12,783,66,"_this3$getTransceiver2"],[722,34,783,66],[722,41,783,66,"_slicedToArray2"],[722,56,783,66],[722,57,783,66,"default"],[722,64,783,66],[722,66,783,66,"_this3$getTransceiver"],[722,87,783,66],[723,12,781,20,"transceiver"],[723,23,781,31],[723,26,781,31,"_this3$getTransceiver2"],[723,48,781,31],[724,10,785,12],[724,14,785,16],[724,15,785,17,"transceiver"],[724,26,785,28],[724,28,785,30],[725,12,785,30],[726,10,787,12],[727,10,789,12],[727,14,789,16,"update"],[727,20,789,22],[727,21,789,23,"currentDirection"],[727,37,789,39],[727,39,789,41],[728,12,790,16,"transceiver"],[728,23,790,27],[728,24,790,28,"_currentDirection"],[728,41,790,45],[728,44,790,48,"update"],[728,50,790,54],[728,51,790,55,"currentDirection"],[728,67,790,71],[729,10,791,12],[730,10,793,12,"transceiver"],[730,21,793,23],[730,22,793,24,"_mid"],[730,26,793,28],[730,29,793,31,"update"],[730,35,793,37],[730,36,793,38,"mid"],[730,39,793,41],[731,10,794,12,"transceiver"],[731,21,794,23],[731,22,794,24,"_stopped"],[731,30,794,32],[731,33,794,35,"Boolean"],[731,40,794,42],[731,41,794,43,"update"],[731,47,794,49],[731,48,794,50,"isStopped"],[731,57,794,59],[731,58,794,60],[732,10,795,12,"transceiver"],[732,21,795,23],[732,22,795,24,"_sender"],[732,29,795,31],[732,30,795,32,"_rtpParameters"],[732,44,795,46],[732,47,795,49],[732,51,795,53,"RTCRtpSendParameters"],[732,80,795,73],[732,81,795,74,"update"],[732,87,795,80],[732,88,795,81,"senderRtpParameters"],[732,107,795,100],[732,108,795,101],[733,10,796,12,"transceiver"],[733,21,796,23],[733,22,796,24,"_receiver"],[733,31,796,33],[733,32,796,34,"_rtpParameters"],[733,46,796,48],[733,49,796,51],[733,53,796,55,"RTCRtpReceiveParameters"],[733,85,796,78],[733,86,796,79,"update"],[733,92,796,85],[733,93,796,86,"receiverRtpParameters"],[733,114,796,107],[733,115,796,108],[734,8,797,8],[734,9,797,9],[735,8,780,8],[735,13,780,13],[735,17,780,19,"update"],[735,23,780,25],[735,27,780,29,"transceiverUpdates"],[735,45,780,47],[736,10,780,47],[736,14,780,47,"_loop2"],[736,20,780,47],[736,21,780,47,"update"],[736,27,780,47],[736,30,786,16],[737,8,786,25],[738,8,799,8],[738,12,799,12,"removeStopped"],[738,25,799,25],[738,27,799,27],[739,10,800,12],[739,14,800,18,"stopped"],[739,21,800,25],[739,24,800,28],[739,28,800,32],[739,29,800,33,"getTransceivers"],[739,44,800,48],[739,45,800,49],[739,46,800,50],[739,47,800,51,"filter"],[739,53,800,57],[739,54,800,58,"t"],[739,55,800,59],[739,59,800,63,"t"],[739,60,800,64],[739,61,800,65,"stopped"],[739,68,800,72],[739,69,800,73],[740,10,801,12],[740,14,801,18,"newTransceivers"],[740,29,801,33],[740,32,801,36],[740,36,801,40],[740,37,801,41,"_transceivers"],[740,50,801,54],[740,51,801,55,"filter"],[740,57,801,61],[740,58,801,62,"t"],[740,59,801,63],[740,63,801,67],[740,64,801,68,"stopped"],[740,71,801,75],[740,72,801,76,"includes"],[740,80,801,84],[740,81,801,85,"t"],[740,82,801,86],[740,83,801,87,"transceiver"],[740,94,801,98],[740,95,801,99],[740,96,801,100],[741,10,803,12],[741,14,803,16],[741,15,803,17,"_transceivers"],[741,28,803,30],[741,31,803,33,"newTransceivers"],[741,46,803,48],[742,8,804,8],[743,6,805,4],[745,6,807,4],[746,0,808,0],[747,0,809,0],[748,0,810,0],[749,0,811,0],[750,4,807,4],[751,6,807,4,"key"],[751,9,807,4],[752,6,807,4,"value"],[752,11,807,4],[752,13,812,4],[752,22,812,4,"_insertTransceiverSorted"],[752,46,812,28,"_insertTransceiverSorted"],[752,47,812,29,"order"],[752,52,812,42],[752,54,812,44,"transceiver"],[752,65,812,74],[752,67,812,76],[753,8,813,8],[753,12,813,12],[753,13,813,13,"_transceivers"],[753,26,813,26],[753,27,813,27,"push"],[753,31,813,31],[753,32,813,32],[754,10,813,34,"order"],[754,15,813,39],[755,10,813,41,"transceiver"],[756,8,813,53],[756,9,813,54],[756,10,813,55],[757,8,814,8],[757,12,814,12],[757,13,814,13,"_transceivers"],[757,26,814,26],[757,27,814,27,"sort"],[757,31,814,31],[757,32,814,32],[757,33,814,33,"a"],[757,34,814,34],[757,36,814,36,"b"],[757,37,814,37],[757,42,814,42,"a"],[757,43,814,43],[757,44,814,44,"order"],[757,49,814,49],[757,52,814,52,"b"],[757,53,814,53],[757,54,814,54,"order"],[757,59,814,59],[757,60,814,60],[758,6,815,4],[759,4,815,5],[760,2,815,5],[760,4,79,47,"EventTarget"],[760,22,79,58],[761,2,818,0],[762,0,819,0],[763,0,820,0],[764,2,821,0],[764,6,821,6,"proto"],[764,11,821,11],[764,14,821,14,"RTCPeerConnection"],[764,31,821,31],[764,32,821,32,"prototype"],[764,41,821,41],[765,2,823,0],[765,6,823,0,"defineEventAttribute"],[765,33,823,20],[765,35,823,21,"proto"],[765,40,823,26],[765,42,823,28],[765,65,823,51],[765,66,823,52],[766,2,824,0],[766,6,824,0,"defineEventAttribute"],[766,33,824,20],[766,35,824,21,"proto"],[766,40,824,26],[766,42,824,28],[766,56,824,42],[766,57,824,43],[767,2,825,0],[767,6,825,0,"defineEventAttribute"],[767,33,825,20],[767,35,825,21,"proto"],[767,40,825,26],[767,42,825,28],[767,61,825,47],[767,62,825,48],[768,2,826,0],[768,6,826,0,"defineEventAttribute"],[768,33,826,20],[768,35,826,21,"proto"],[768,40,826,26],[768,42,826,28],[768,68,826,54],[768,69,826,55],[769,2,827,0],[769,6,827,0,"defineEventAttribute"],[769,33,827,20],[769,35,827,21,"proto"],[769,40,827,26],[769,42,827,28],[769,67,827,53],[769,68,827,54],[770,2,828,0],[770,6,828,0,"defineEventAttribute"],[770,33,828,20],[770,35,828,21,"proto"],[770,40,828,26],[770,42,828,28],[770,61,828,47],[770,62,828,48],[771,2,829,0],[771,6,829,0,"defineEventAttribute"],[771,33,829,20],[771,35,829,21,"proto"],[771,40,829,26],[771,42,829,28],[771,64,829,50],[771,65,829,51],[772,2,830,0],[772,6,830,0,"defineEventAttribute"],[772,33,830,20],[772,35,830,21,"proto"],[772,40,830,26],[772,42,830,28],[772,55,830,41],[772,56,830,42],[773,2,831,0],[773,6,831,0,"defineEventAttribute"],[773,33,831,20],[773,35,831,21,"proto"],[773,40,831,26],[773,42,831,28],[773,49,831,35],[773,50,831,36],[774,2,832,0],[774,6,832,0,"defineEventAttribute"],[774,33,832,20],[774,35,832,21,"proto"],[774,40,832,26],[774,42,832,28],[774,49,832,35],[774,50,832,36],[775,0,832,37],[775,3]],"functionMap":{"names":["<global>","RTCPeerConnection","constructor","urls.map$argument_0","servers.filter$argument_0","createOffer","newTransceivers.forEach$argument_0","createAnswer","setConfiguration","setLocalDescription","setRemoteDescription","getTransceivers.filter$argument_0","ev.streams.map$argument_0","streams.forEach$argument_0","addIceCandidate","addTrack","streams.map$argument_0","getSenders.filter$argument_0","addTransceiver","init.streams.map$argument_0","removeTrack","getSenders.find$argument_0","getStats","getReceivers.filter$argument_0","getTransceivers","_transceivers.map$argument_0","getSenders","_transceivers.filter$argument_0","_transceivers.filter.map$argument_0","getReceivers","close","_transceivers.forEach$argument_0","restartIce","_registerEvents","addListener$argument_2","getReceivers.find$argument_0","getReceivers.map$argument_0","getReceivers.map.filter$argument_0","createDataChannel","_trackExists","_updateTransceivers","_insertTransceiverSorted","_transceivers.sort$argument_0"],"mappings":"AAA;eC8E;ICa;uCCwB,wBD;sDEI,WF;KDc;IIE;iCCW;SDa;KJK;IME;KNW;IOE;KPE;IQE;KRgC;ISE;iCJ4B;SIa;wBCY,sCD;0DEc;aFoB;4BGY;aHE;KTO;IaE;KbsB;IcU;sCCW,SD;oBEa,uBF;wBJS,sCI;KdqB;IiBE;8CCe,mBD;KjBiC;ImBE;kBCa,iBD;oBTiB,sCS;KnBG;IqBE;qDLiB,yBK;yDCC,yBD;KrBa;IuBE;sCCC,kBD;KvBC;IyBE;yCCC,2BD,ME,yBF;KzBC;I4BE;yCFC,2BE,MD,2BC;K5BC;I6BE;mCCU;SDE;K7BC;I+BE;K/BE;IgCE;iECC;SDM;gECE;SDQ;wDCE;SDe;iECE;SDQ;mDCG;SDW;yDCE;sDCO,2BD;SDwB;2DCE;SDiB;+DCE;SDqB;8DCE;SDY;yDCE;wCEO,YF,SG,yBH;SDK;KhCC;IqCa;KrCoB;IsCM;gBtBI,uCsB;KtCI;IuCK;wB7BI,yC6B;0D7BiB,c6B;8DbC,qCa;KvCI;IwCO;gCCE,2BD;KxCC;CDC"}},"type":"js/module"}]}